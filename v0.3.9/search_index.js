var documenterSearchIndex = {"docs":
[{"location":"linalg/#Linear-Algebra-Benchmarks","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"","category":"section"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"SnpArrays.jl supports three modes of matrix-vector multiplications:","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"Direct operations on a plink-formatted SnpArray: SnpLinAlg\nOperations on transformed BitMatrixes: SnpBitMatrix (support for this will be dropped in the near future)\nDirect operations on a plink-formatted data on an Nvidia GPU: CuSnpArray.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"SnpLinAlg also supports matrix-matrix multiplications.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"SnpLinAlg and SnpBitMatrix use Chris Elrod's LoopVectorization.jl internally. It is much faster on machines with AVX support.  \nCuSnpArray uses CUDA.jl internally.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"On this page, we compare these three.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"SnpLinAlg supports multithreading. See this page to learn how to use it.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"versioninfo()","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"Julia Version 1.6.0\nCommit f9720dc2eb (2021-03-24 12:55 UTC)\nPlatform Info:\n  OS: macOS (x86_64-apple-darwin19.6.0)\n  CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, skylake)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"using SnpArrays\nusing LinearAlgebra\nusing BenchmarkTools","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"┌ Info: Precompiling SnpArrays [4e780e97-f5bf-4111-9dc4-b70aaf691b06]\n└ @ Base loading.jl:1317\nWARNING: could not import DataFrames.DataFrame! into SnpArrays","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"const EUR = SnpArray(SnpArrays.datadir(\"EUR_subset.bed\"));","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"Let's try with EUR data repeated 100 and 101 times: 37900 by 54051 and 38279 by 54051, respectively.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"EUR_10 = [EUR; EUR; EUR; EUR; EUR; EUR; EUR; EUR; EUR; EUR]\nEUR_100 = [EUR_10; EUR_10; EUR_10; EUR_10; EUR_10; EUR_10; EUR_10; EUR_10; EUR_10; EUR_10];\nEUR_101 = [EUR_100; EUR];","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"We create instances of SnpLinAlg, SnpBitmatrix and CuSnpArray:","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"EUR_100_bm = SnpBitMatrix{Float64}(EUR_100; model=ADDITIVE_MODEL, center=false, scale=false);\nEUR_100_sla = SnpLinAlg{Float64}(EUR_100; model=ADDITIVE_MODEL, center=false, scale=false);\nEUR_100_sla_ = SnpLinAlg{Float64}(EUR_100; model=ADDITIVE_MODEL, center=false, scale=false, impute=false);\nEUR_100_mat = convert(Matrix{Float64}, EUR_100, model=ADDITIVE_MODEL, center=false, scale=false);\n\nEUR_101_bm = SnpBitMatrix{Float64}(EUR_101; model=ADDITIVE_MODEL, center=false, scale=false);\nEUR_101_sla = SnpLinAlg{Float64}(EUR_101; model=ADDITIVE_MODEL, center=false, scale=false);\nEUR_101_sla_ = SnpLinAlg{Float64}(EUR_101; model=ADDITIVE_MODEL, center=false, scale=false, impute=false);\nEUR_101_mat = convert(Matrix{Float64}, EUR_101, model=ADDITIVE_MODEL, center=false, scale=false);","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"ENV[\"JULIA_CUDA_USE_BINARYBUILDER\"] = \"false\"\nusing CUDA\nEUR_100_cu = CuSnpArray{Float64}(EUR_100; model=ADDITIVE_MODEL, center=false, scale=false);\nEUR_100_cu_ = CuSnpArray{Float64}(EUR_100; model=ADDITIVE_MODEL, center=false, scale=false, impute=false);","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"┌ Warning: `haskey(::TargetIterator, name::String)` is deprecated, use `Target(; name = name) !== nothing` instead.\n│   caller = llvm_compat(::VersionNumber) at compatibility.jl:176\n└ @ CUDA /home/kose/.julia/packages/CUDA/5t6R9/deps/compatibility.jl:176","category":"page"},{"location":"linalg/#y-Ax","page":"Linear Algebra Benchmarks","title":"y = Ax","text":"","category":"section"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"v1 = randn(size(EUR_100, 1))\nv1_ = randn(size(EUR_100, 1))\nv2 = randn(size(EUR_100, 2));","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"With 8-threaded OpenBLAS (included in standard binary installation of Julia): ","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BLAS.set_num_threads(8)\n@benchmark LinearAlgebra.mul!($v1, $EUR_100_mat, $v2)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     361.080 ms (0.00% GC)\n  median time:      581.438 ms (0.00% GC)\n  mean time:        535.216 ms (0.00% GC)\n  maximum time:     668.896 ms (0.00% GC)\n  --------------\n  samples:          10\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"With single-threaded OpenBLAS: ","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BLAS.set_num_threads(1)\n@benchmark LinearAlgebra.mul!($v1, $EUR_100_mat, $v2)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     2.741 s (0.00% GC)\n  median time:      2.880 s (0.00% GC)\n  mean time:        2.880 s (0.00% GC)\n  maximum time:     3.019 s (0.00% GC)\n  --------------\n  samples:          2\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"Direct linear algebra on a SnpArray, with mean imputation: ","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark LinearAlgebra.mul!($v1, $EUR_100_sla, $v2)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  38.33 KiB\n  allocs estimate:  1616\n  --------------\n  minimum time:     1.726 s (0.00% GC)\n  median time:      1.748 s (0.00% GC)\n  mean time:        1.744 s (0.00% GC)\n  maximum time:     1.757 s (0.00% GC)\n  --------------\n  samples:          3\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"With zero imputation:","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark LinearAlgebra.mul!($v1, $EUR_100_sla_, $v2)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  38.33 KiB\n  allocs estimate:  1616\n  --------------\n  minimum time:     1.013 s (0.00% GC)\n  median time:      1.032 s (0.00% GC)\n  mean time:        1.029 s (0.00% GC)\n  maximum time:     1.037 s (0.00% GC)\n  --------------\n  samples:          5\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"Indeed, we are paying some price for mean imputation.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"The below is the benchmark for SnpBitMatrix (always zero-imputed):","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark (LinearAlgebra.mul!($v1, $EUR_100_bm, $v2))","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.057 s (0.00% GC)\n  median time:      1.089 s (0.00% GC)\n  mean time:        1.085 s (0.00% GC)\n  maximum time:     1.124 s (0.00% GC)\n  --------------\n  samples:          5\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"At first glance, the result from SnpBitMatrix might look better than SnpLinAlg. However, SnpLinAlg is more stable in performance when the number of samples is not multiple of 4 or 8.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"v1 = randn(size(EUR_101, 1))\nv2 = randn(size(EUR_101, 2));","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark LinearAlgebra.mul!($v1, $EUR_101_sla, $v2)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  44.13 KiB\n  allocs estimate:  1722\n  --------------\n  minimum time:     1.322 s (0.00% GC)\n  median time:      1.635 s (0.00% GC)\n  mean time:        1.561 s (0.00% GC)\n  maximum time:     1.654 s (0.00% GC)\n  --------------\n  samples:          4\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark LinearAlgebra.mul!($v1, $EUR_101_sla_, $v2)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  44.13 KiB\n  allocs estimate:  1722\n  --------------\n  minimum time:     1.032 s (0.00% GC)\n  median time:      1.039 s (0.00% GC)\n  mean time:        1.039 s (0.00% GC)\n  maximum time:     1.046 s (0.00% GC)\n  --------------\n  samples:          5\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark LinearAlgebra.mul!($v1, $EUR_101_bm, $v2)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.214 s (0.00% GC)\n  median time:      1.230 s (0.00% GC)\n  mean time:        1.256 s (0.00% GC)\n  maximum time:     1.348 s (0.00% GC)\n  --------------\n  samples:          4\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"Now let's try CUDA. The device is Nvidia Titan V.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"using Adapt","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"Moving data to GPU: ","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"v1 = randn(size(EUR_100, 1))\nv1_ = randn(size(EUR_100, 1))\nv2 = randn(size(EUR_100, 2));\nv1_d = adapt(CuArray{Float64}, v1)\nv1_d_ = similar(v1_d)\nv2_d = adapt(CuArray{Float64}, v2);","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"using BenchmarkTools\n@benchmark CUDA.@sync LinearAlgebra.mul!($v1_d, $EUR_100_cu, $v2_d)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"┌ Warning: `Target(triple::String)` is deprecated, use `Target(; triple = triple)` instead.\n│   caller = ip:0x0\n└ @ Core :-1\n\n\n\n\n\nBenchmarkTools.Trial: \n  memory estimate:  3.28 KiB\n  allocs estimate:  130\n  --------------\n  minimum time:     22.141 ms (0.00% GC)\n  median time:      22.287 ms (0.00% GC)\n  mean time:        22.286 ms (0.00% GC)\n  maximum time:     22.739 ms (0.00% GC)\n  --------------\n  samples:          225\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"For CuSnpArray, the additional cost for mean imputation is negligible.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark CUDA.@sync LinearAlgebra.mul!($v1_d_, $EUR_100_cu_, $v2_d)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  3.28 KiB\n  allocs estimate:  130\n  --------------\n  minimum time:     22.063 ms (0.00% GC)\n  median time:      22.283 ms (0.00% GC)\n  mean time:        22.667 ms (0.00% GC)\n  maximum time:     54.782 ms (0.00% GC)\n  --------------\n  samples:          221\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"EUR_100_mat_d = adapt(CuArray, EUR_100_mat);","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark CUDA.@sync LinearAlgebra.mul!($v1_d, $EUR_100_mat_d, $v2_d)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  2.58 KiB\n  allocs estimate:  85\n  --------------\n  minimum time:     76.064 ms (0.00% GC)\n  median time:      80.063 ms (0.00% GC)\n  mean time:        78.925 ms (0.00% GC)\n  maximum time:     81.984 ms (0.00% GC)\n  --------------\n  samples:          64\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"The speedup is obvious, CuSnpArrays is 30-50x faster than on CPU, and using CuSnpArray is both faster and memory-efficient compared to linear algebra with floating point matrix on GPU.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"isapprox(v1_d, v1_d_)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"true","category":"page"},{"location":"linalg/#y-AT-x","page":"Linear Algebra Benchmarks","title":"y = A^T x","text":"","category":"section"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"v1 = randn(size(EUR_100, 1))\nv2 = randn(size(EUR_100, 2))\nv2_ = randn(size(EUR_100, 2))\nv1_d = adapt(CuArray{Float64}, v1)\nv2_d = adapt(CuArray{Float64}, v2);","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark LinearAlgebra.mul!($v2, transpose($EUR_100_sla), $v1)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  38.34 KiB\n  allocs estimate:  1617\n  --------------\n  minimum time:     934.273 ms (0.00% GC)\n  median time:      941.154 ms (0.00% GC)\n  mean time:        940.465 ms (0.00% GC)\n  maximum time:     946.902 ms (0.00% GC)\n  --------------\n  samples:          6\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark (LinearAlgebra.mul!($v2, transpose($EUR_100_bm), $v1))","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     613.994 ms (0.00% GC)\n  median time:      624.201 ms (0.00% GC)\n  mean time:        623.735 ms (0.00% GC)\n  maximum time:     635.480 ms (0.00% GC)\n  --------------\n  samples:          9\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark LinearAlgebra.mul!($v2_d, transpose($EUR_100_cu), $v1_d)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  3.08 KiB\n  allocs estimate:  118\n  --------------\n  minimum time:     26.717 ms (0.00% GC)\n  median time:      26.903 ms (0.00% GC)\n  mean time:        27.136 ms (0.00% GC)\n  maximum time:     31.066 ms (0.00% GC)\n  --------------\n  samples:          185\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"isapprox(collect(v2_d), v2)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"true","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"v1 = randn(size(EUR_101, 1))\nv2 = randn(size(EUR_101, 2));","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark LinearAlgebra.mul!($v2, transpose($EUR_101_sla), $v1)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  44.14 KiB\n  allocs estimate:  1723\n  --------------\n  minimum time:     958.926 ms (0.00% GC)\n  median time:      965.005 ms (0.00% GC)\n  mean time:        969.983 ms (0.00% GC)\n  maximum time:     1.002 s (0.00% GC)\n  --------------\n  samples:          6\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark LinearAlgebra.mul!($v2, transpose($EUR_101_sla_), $v1)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  44.14 KiB\n  allocs estimate:  1723\n  --------------\n  minimum time:     1.089 s (0.00% GC)\n  median time:      1.092 s (0.00% GC)\n  mean time:        1.097 s (0.00% GC)\n  maximum time:     1.107 s (0.00% GC)\n  --------------\n  samples:          5\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"@benchmark (LinearAlgebra.mul!($v2, transpose($EUR_101_bm), $v1))","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  16 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     620.057 ms (0.00% GC)\n  median time:      628.593 ms (0.00% GC)\n  mean time:        635.710 ms (0.00% GC)\n  maximum time:     664.656 ms (0.00% GC)\n  --------------\n  samples:          8\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BitMatrix is slightly faster in this direction.","category":"page"},{"location":"linalg/#Y-AX","page":"Linear Algebra Benchmarks","title":"Y = AX","text":"","category":"section"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"Now for matrix-matrix multiplications. If we want to center/scale the SnpArray, we have","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"beginaligned\n    Y_ij = sum_k fracA_ik - mu_ksigma_kX_kj\nendaligned","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"where mu_k and sigma_k is the mean and standard deviation of the kth SNP. Centering and scaling is performed on-the-fly. First check correctness","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"EUR = SnpArray(SnpArrays.datadir(\"EUR_subset.bed\"));\nEUR_10 = [EUR; EUR; EUR; EUR; EUR; EUR; EUR; EUR; EUR; EUR]\n\nm = size(EUR_10, 1)\nn = size(EUR_10, 2)\np = 2\n\nA = SnpLinAlg{Float64}(EUR_10; model=ADDITIVE_MODEL, impute=true, center=true, scale=true);\nX = rand(n, p)\nY = zeros(m, p)\nSnpArrays.mul!(Y, A, X)\nAfloat = convert(Matrix{Float64}, EUR_10, impute=true, center=true, scale=true)\nYtrue = Afloat * X\nall(Y .≈ Ytrue)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"true","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"Now lets check out timings. If B is a \"tall and thin\" matrix, then SnpLinAlg remains competitive, often superior, to BLAS. ","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# SnpLinAlg-matrix\n@benchmark LinearAlgebra.mul!($Y, $A, $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  112 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     173.410 ms (0.00% GC)\n  median time:      183.456 ms (0.00% GC)\n  mean time:        185.278 ms (0.00% GC)\n  maximum time:     212.790 ms (0.00% GC)\n  --------------\n  samples:          28\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# BLAS with 1 threaed \nBLAS.set_num_threads(1)\n@benchmark LinearAlgebra.mul!($Y, $Afloat, $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     174.038 ms (0.00% GC)\n  median time:      210.557 ms (0.00% GC)\n  mean time:        207.253 ms (0.00% GC)\n  maximum time:     256.666 ms (0.00% GC)\n  --------------\n  samples:          25\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# BLAS with 8 threaed \nBLAS.set_num_threads(8)\n@benchmark LinearAlgebra.mul!($Y, $Afloat, $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     70.793 ms (0.00% GC)\n  median time:      81.628 ms (0.00% GC)\n  mean time:        85.057 ms (0.00% GC)\n  maximum time:     138.839 ms (0.00% GC)\n  --------------\n  samples:          59\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"But if B is a large matrix too, single threaded BLAS is ~6 times faster and >10x faster for 8 thread BLAS. ","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# SnpLinAlg-matrix\np = 100\nX = rand(n, p)\nY = zeros(m, p)\n@benchmark LinearAlgebra.mul!($Y, $A, $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  112 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     4.889 s (0.00% GC)\n  median time:      4.910 s (0.00% GC)\n  mean time:        4.910 s (0.00% GC)\n  maximum time:     4.932 s (0.00% GC)\n  --------------\n  samples:          2\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# BLAS with 1 threaed \nBLAS.set_num_threads(1)\n@benchmark LinearAlgebra.mul!($Y, $Afloat, $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     806.519 ms (0.00% GC)\n  median time:      818.924 ms (0.00% GC)\n  mean time:        817.595 ms (0.00% GC)\n  maximum time:     832.166 ms (0.00% GC)\n  --------------\n  samples:          7\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# BLAS with 8 threaed \nBLAS.set_num_threads(8)\n@benchmark LinearAlgebra.mul!($Y, $Afloat, $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     217.737 ms (0.00% GC)\n  median time:      238.400 ms (0.00% GC)\n  mean time:        251.802 ms (0.00% GC)\n  maximum time:     305.899 ms (0.00% GC)\n  --------------\n  samples:          20\n  evals/sample:     1","category":"page"},{"location":"linalg/#Y-AtX","page":"Linear Algebra Benchmarks","title":"Y = A^tX","text":"","category":"section"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"If we want to center/scale the SnpArray, we have","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"beginaligned\n    Y_ij = sum_k left(fracA_ik - mu_isigma_iright)X_kj\nendaligned","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"where mu_i and sigma_i is the mean and standard deviation of the ith SNP. Similar to before, lets first check correctness.","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"EUR = SnpArray(SnpArrays.datadir(\"EUR_subset.bed\"));\nEUR_10 = [EUR; EUR; EUR; EUR; EUR; EUR; EUR; EUR; EUR; EUR]\n\nm = size(EUR_10, 1)\nn = size(EUR_10, 2)\np = 2\n\nA = SnpLinAlg{Float64}(EUR_10; model=ADDITIVE_MODEL, impute=true, center=true, scale=true);\nX = rand(m, p)\nY = zeros(n, p)\nSnpArrays.mul!(Y, Transpose(A), X)\nAfloat = convert(Matrix{Float64}, EUR_10, impute=true, center=true, scale=true)\nYtrue = Afloat' * X\nall(Y .≈ Ytrue)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"true","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"Now lets check out timings. If B is a \"tall and thin\" matrix, then SnpLinAlg remains competitive, often superior, to BLAS. ","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# SnpLinAlg-matrix\n@benchmark LinearAlgebra.mul!($Y, $(Transpose(A)), $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  304 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     214.029 ms (0.00% GC)\n  median time:      216.865 ms (0.00% GC)\n  mean time:        217.732 ms (0.00% GC)\n  maximum time:     228.314 ms (0.00% GC)\n  --------------\n  samples:          23\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# BLAS with 1 threaed \nBLAS.set_num_threads(1)\n@benchmark LinearAlgebra.mul!($Y, $(Transpose(Afloat)), $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     270.484 ms (0.00% GC)\n  median time:      297.139 ms (0.00% GC)\n  mean time:        302.211 ms (0.00% GC)\n  maximum time:     343.174 ms (0.00% GC)\n  --------------\n  samples:          17\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# BLAS with 8 threaed \nBLAS.set_num_threads(8)\n@benchmark LinearAlgebra.mul!($Y, $(Transpose(Afloat)), $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     96.434 ms (0.00% GC)\n  median time:      111.485 ms (0.00% GC)\n  mean time:        126.247 ms (0.00% GC)\n  maximum time:     229.535 ms (0.00% GC)\n  --------------\n  samples:          40\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"But if B is a large matrix too, single threaded BLAS is ~6 times faster and >10x faster for 8 thread BLAS. ","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# SnpLinAlg-matrix\np = 100\nX = rand(m, p)\nY = zeros(n, p)\n@benchmark LinearAlgebra.mul!($Y, $(Transpose(A)), $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  304 bytes\n  allocs estimate:  1\n  --------------\n  minimum time:     6.196 s (0.00% GC)\n  median time:      6.196 s (0.00% GC)\n  mean time:        6.196 s (0.00% GC)\n  maximum time:     6.196 s (0.00% GC)\n  --------------\n  samples:          1\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# BLAS with 1 threaed \nBLAS.set_num_threads(1)\n@benchmark LinearAlgebra.mul!($Y, $(Transpose(Afloat)), $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     1.013 s (0.00% GC)\n  median time:      1.055 s (0.00% GC)\n  mean time:        1.111 s (0.00% GC)\n  maximum time:     1.310 s (0.00% GC)\n  --------------\n  samples:          5\n  evals/sample:     1","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"# BLAS with 8 threaed \nBLAS.set_num_threads(8)\n@benchmark LinearAlgebra.mul!($Y, $(Transpose(Afloat)), $X)","category":"page"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"BenchmarkTools.Trial: \n  memory estimate:  0 bytes\n  allocs estimate:  0\n  --------------\n  minimum time:     221.024 ms (0.00% GC)\n  median time:      284.014 ms (0.00% GC)\n  mean time:        286.916 ms (0.00% GC)\n  maximum time:     422.793 ms (0.00% GC)\n  --------------\n  samples:          18\n  evals/sample:     1","category":"page"},{"location":"linalg/#Conclusion","page":"Linear Algebra Benchmarks","title":"Conclusion","text":"","category":"section"},{"location":"linalg/","page":"Linear Algebra Benchmarks","title":"Linear Algebra Benchmarks","text":"SnpLinAlg (for CPU)\nachieves up to 32x memory savings compared to double-precision matrices\nis usually faster than single threaded BLAS for matrix-vector multiply.\nis competitive with single threaded BLAS for matrix-matrix multiply if B is \"tall and thin\"\nCuSnpArray supports GPU matrix-vector operations that is 30-50x faster than multithreaded BLAS. \nOther linear algebra operations (e.g. v*A and qr(A)...etc) will be much slower than are not guaranteed to work. ","category":"page"},{"location":"#SnpArrays.jl","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Data from genome-wide association studies (GWAS) are often saved as a PLINK binary biallelic genotype table or .bed file. To be useful, such files should be accompanied by a .fam file, containing metadata on the rows of the table, and a .bim file, containing metadata on the columns. The .fam and .bim files are in tab-separated format.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"The table contains the observed allelic type at n single nucleotide polymorphism (SNP) positions for m individuals. A SNP corresponds to a nucleotide position on the genome where some degree of variation has been observed in a population, with each individual have one of two possible alleles at that position on each of a pair of chromosomes. Three possible genotypes and corresponding coding are","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Genotype Plink/SnpArray\nA1,A1 0x00\nmissing 0x01\nA1,A2 0x02\nA2,A2 0x03","category":"page"},{"location":"#Installation","page":"SnpArrays.jl Tutorial","title":"Installation","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"This package requires Julia v1.4 or later, which can be obtained from https://julialang.org/downloads/ or by building Julia from the sources in the https://github.com/JuliaLang/julia repository.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"The package has not yet been registered and must be installed using the repository location. Start Julia and use the ] key to switch to the package manager REPL","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"(@v1.5) pkg> add https://github.com/OpenMendel/SnpArrays.jl","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Use the backspace key to return to the Julia REPL.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"versioninfo()","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Julia Version 1.6.0\nCommit f9720dc2eb (2021-03-24 12:55 UTC)\nPlatform Info:\n  OS: macOS (x86_64-apple-darwin19.6.0)\n  CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, skylake)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# for use in this tutorial\nusing SnpArrays, ADMIXTURE, BenchmarkTools, DelimitedFiles, Glob\nSys.islinux() && (using CUDA);","category":"page"},{"location":"#Example-data","page":"SnpArrays.jl Tutorial","title":"Example data","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"There are two example data sets attached to this package. They are availabe in the data folder of the package.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"datapath = normpath(SnpArrays.datadir())","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"\"/home/huazhou/.julia/dev/SnpArrays.jl/data\"","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"readdir(glob\"mouse.*\", datapath)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"3-element Array{String,1}:\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/mouse.bed\"\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/mouse.bim\"\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/mouse.fam\"","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Data set EUR_subset contains no missing genotypes. It is located at","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"readdir(glob\"EUR_subset.*\", datapath)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"3-element Array{String,1}:\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/EUR_subset.bed\"\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/EUR_subset.bim\"\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/EUR_subset.fam\"","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Data from recent studies, which have samples from tens of thousands of individuals at over a million SNP positions, would be in the tens or even hundreds of Gb range.","category":"page"},{"location":"#SnpArray","page":"SnpArrays.jl Tutorial","title":"SnpArray","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArray is the fundamental type for dealing with genotype data in Plink bed file. Each row of SnpArray is a sample and each column a SNP.","category":"page"},{"location":"#Constructor","page":"SnpArrays.jl Tutorial","title":"Constructor","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"There are various ways to initialize a SnpArray.","category":"page"},{"location":"#Intitialize-from-Plink-file-set","page":"SnpArrays.jl Tutorial","title":"Intitialize from Plink file set","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArray can be initialized from the Plink bed file. The corresponding .fam needs to be present, which is used to determine the number of individuals.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"const mouse = SnpArray(SnpArrays.datadir(\"mouse.bed\"))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×10150 SnpArray:\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x02  0x02  0x02  0x02  0x02\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x02  0x02  0x02  0x02  0x02\n 0x03  0x03  0x03  0x03  0x03  0x03  …  0x00  0x00  0x00  0x00  0x00  0x00\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x00  0x00  0x00  0x00  0x00  0x00\n    ⋮                             ⋮  ⋱           ⋮                    \n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02     0x01  0x01  0x01  0x01  0x01  0x01\n 0x00  0x00  0x00  0x00  0x03  0x00     0x03  0x03  0x03  0x03  0x03  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"The virtual size of the GWAS data is 1940 observations at each of 10150 SNP positions.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"size(mouse)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"(1940, 10150)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Because the file is memory-mapped opening the file and accessing the data is fast, even for very large .bed files.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@btime(SnpArray(SnpArrays.datadir(\"mouse.bed\")));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  64.547 μs (58 allocations: 389.97 KiB)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"By default, the memory-mapped file is read only, changing entries is not allowed.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"mouse[1, 1] = 0x00","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"ReadOnlyMemoryError()\n\n\n\nStacktrace:\n\n [1] setindex! at ./array.jl:849 [inlined]\n\n [2] setindex!(::SnpArray, ::UInt8, ::Int64, ::Int64) at /home/huazhou/.julia/dev/SnpArrays.jl/src/snparray.jl:131\n\n [3] top-level scope at In[9]:1\n\n [4] include_string(::Function, ::Module, ::String, ::String) at ./loading.jl:1091","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"To possibly change genoytpes in a bed file, open with write permission","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"mouse = SnpArray(SnpArrays.datadir(\"mouse.bed\"), \"w\")","category":"page"},{"location":"#Initialize-from-only-bed-file","page":"SnpArrays.jl Tutorial","title":"Initialize from only bed file","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"If only the bed file is present, user is required to supply the number of individuals in the second argument.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArray(SnpArrays.datadir(\"mouse.bed\"), 1940)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×10150 SnpArray:\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x02  0x02  0x02  0x02  0x02\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x02  0x02  0x02  0x02  0x02\n 0x03  0x03  0x03  0x03  0x03  0x03  …  0x00  0x00  0x00  0x00  0x00  0x00\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x00  0x00  0x00  0x00  0x00  0x00\n    ⋮                             ⋮  ⋱           ⋮                    \n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02     0x01  0x01  0x01  0x01  0x01  0x01\n 0x00  0x00  0x00  0x00  0x03  0x00     0x03  0x03  0x03  0x03  0x03  0x03","category":"page"},{"location":"#Initialize-from-compressed-Plink-files","page":"SnpArrays.jl Tutorial","title":"Initialize from compressed Plink files","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArray can be initialized from Plink files in compressed formats: gz, zlib, zz, xz, zst, or bz2. For a complete list type","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.ALLOWED_FORMAT","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"If you want to support a new compressed format, file an issue.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Let us first compress the mouse data in gz format. We see gz format takes less than 1/3 storage of original Plink files.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"compress_plink(SnpArrays.datadir(\"mouse\"), \"gz\")\nreaddir(glob\"mouse.*.gz\", datapath)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"3-element Array{String,1}:\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/mouse.bed.gz\"\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/mouse.bim.gz\"\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/mouse.fam.gz\"","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"To initialize SnpArray from gzipped Plink file, simply used the bed file with name ending with .bed.gz:","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# requires corresponding `.fam.gz` file\nSnpArray(SnpArrays.datadir(\"mouse.bed.gz\"))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×10150 SnpArray:\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x02  0x02  0x02  0x02  0x02\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x02  0x02  0x02  0x02  0x02\n 0x03  0x03  0x03  0x03  0x03  0x03  …  0x00  0x00  0x00  0x00  0x00  0x00\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x00  0x00  0x00  0x00  0x00  0x00\n    ⋮                             ⋮  ⋱           ⋮                    \n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02     0x01  0x01  0x01  0x01  0x01  0x01\n 0x00  0x00  0x00  0x00  0x03  0x00     0x03  0x03  0x03  0x03  0x03  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"or","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# does not require corresponding `.fam.gz` file\nSnpArray(SnpArrays.datadir(\"mouse.bed.gz\"), 1940)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×10150 SnpArray:\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x02  0x02  0x02  0x02  0x02\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x02  0x02  0x02  0x02  0x02\n 0x03  0x03  0x03  0x03  0x03  0x03  …  0x00  0x00  0x00  0x00  0x00  0x00\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x00  0x00  0x00  0x00  0x00  0x00\n    ⋮                             ⋮  ⋱           ⋮                    \n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02     0x01  0x01  0x01  0x01  0x01  0x01\n 0x00  0x00  0x00  0x00  0x03  0x00     0x03  0x03  0x03  0x03  0x03  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# clean up\nrm(SnpArrays.datadir(\"mouse.bed.gz\"), force=true)\nrm(SnpArrays.datadir(\"mouse.fam.gz\"), force=true)\nrm(SnpArrays.datadir(\"mouse.bim.gz\"), force=true)","category":"page"},{"location":"#Initialize-and-create-bed-file","page":"SnpArrays.jl Tutorial","title":"Initialize and create bed file","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Initialize 5 rows and 3 columns with all (A1, A1) genotype (0x00) and memory-map to a bed file tmp.bed","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"tmpbf = SnpArray(\"tmp.bed\", 5, 3)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"5×3 SnpArray:\n 0x00  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Change entries","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"tmpbf[1:2, 1:2] .= 0x03\ntmpbf","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"5×3 SnpArray:\n 0x03  0x03  0x00\n 0x03  0x03  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"fill!(tmpbf, 0x02)\ntmpbf","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"5×3 SnpArray:\n 0x02  0x02  0x02\n 0x02  0x02  0x02\n 0x02  0x02  0x02\n 0x02  0x02  0x02\n 0x02  0x02  0x02","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# clean up\nrm(\"tmp.bed\", force=true)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Initialize 5 rows and 3 columns with undefined genotypes without memory-mapping to any file","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"tmpbf = SnpArray(undef, 5, 3)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"5×3 SnpArray:\n 0x02  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Create a bed file corresponding to an existing SnpArray and memory-map it.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"tmpbf = SnpArray(\"tmp.bed\", tmpbf)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"5×3 SnpArray:\n 0x02  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"tmpbf[1, 1] = 0x02\ntmpbf","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"5×3 SnpArray:\n 0x02  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00\n 0x00  0x00  0x00","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# clean up\nrm(\"tmp.bed\", force=true)","category":"page"},{"location":"#convert-and-copyto!","page":"SnpArrays.jl Tutorial","title":"convert and copyto!","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Most common usage of SnpArray is to convert genotypes to numeric values for statistical analysis. Conversion rule depends on genetic models (additive, dominant, or recessive), centering, scaling, or imputation.","category":"page"},{"location":"#convert","page":"SnpArrays.jl Tutorial","title":"convert","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"convert function has 4 keyword arguments: model, center, scale, and impute.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"model keyword specifies the SNP model for conversion. By default convert function translates genotypes according to the additive SNP model, which essentially counts the number of A2 allele (0, 1 or 2) per genotype. Other SNP models are dominant and recessive, both in terms of the A2 allele.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Genotype SnpArray model=ADDITIVE_MODEL model=DOMINANT_MODEL model=RECESSIVE_MODEL\nA1,A1 0x00 0 0 0\nmissing 0x01 NaN NaN NaN\nA1,A2 0x02 1 1 0\nA2,A2 0x03 2 1 1","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"center=true tells convert to center each column by its mean. Default is false.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"scale=true tells convert to scale each column by its standard deviation. Default is false.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"impute=true tells convert to impute missing genotypes (0x01) by column mean. Default is false.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Convert whole SnpArray to a Float64 matrix using defaults (model=ADDITIVE_MODEL, center=false, scale=false, impute=false)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"convert(Matrix{Float64}, mouse)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×10150 Array{Float64,2}:\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0  1.0  …    2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  2.0  1.0  1.0  1.0  1.0  2.0       2.0    2.0    2.0    2.0    2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0  2.0       2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  1.0  1.0  1.0  1.0  1.0  2.0       2.0    2.0    2.0    2.0    2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0  2.0       1.0    1.0    1.0    1.0    1.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0  1.0  …    2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0  1.0       2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  2.0  1.0  1.0  1.0  1.0  2.0       2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  2.0  1.0  1.0  1.0  1.0  2.0       2.0    2.0    2.0    2.0    2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0  2.0       1.0    1.0    1.0    1.0    1.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0  2.0  …    0.0    0.0    0.0    0.0    0.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0  1.0       2.0    2.0    2.0    2.0    2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0  2.0       0.0    0.0    0.0    0.0    0.0\n ⋮                        ⋮              ⋱    ⋮                         \n 2.0  2.0  2.0  2.0  2.0  2.0  2.0  2.0       2.0    2.0    2.0    2.0    2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0  2.0       2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  1.0  1.0  1.0  1.0  1.0  2.0  …    2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0  1.0       2.0    2.0    2.0    2.0    2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0  2.0       2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0  1.0       2.0    2.0    2.0    2.0    2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0  2.0       2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0  1.0  …    2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  2.0  1.0  1.0  1.0  1.0  2.0       2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  2.0  1.0  1.0  1.0  1.0  2.0       2.0    2.0    2.0    2.0    2.0\n 1.0  1.0  1.0  1.0  1.0  1.0  1.0  2.0     NaN    NaN    NaN    NaN    NaN\n 0.0  0.0  0.0  0.0  2.0  0.0  2.0  0.0       2.0    2.0    2.0    2.0    2.0","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"note: Note\nWhen convert or copyto! a slice or subarray of SnpArray, using view, @view or views is necessary for both correctness and efficiency. Without view, it's simply converting the UInt8 coding in original bed file.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Convert a column to Float64 vector using defaults (model=ADDITIVE_MODEL, center=false, scale=false, impute=false).","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# convert(Vector{Float64}, view(mouse, :, 1)) # alternative syntax\n# @views convert(Vector{Float64}, mouse[:, 1]) # alternative syntax\nconvert(Vector{Float64}, @view(mouse[:, 1]))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940-element Array{Float64,1}:\n 1.0\n 1.0\n 2.0\n 1.0\n 2.0\n 1.0\n 1.0\n 1.0\n 1.0\n 2.0\n 2.0\n 1.0\n 2.0\n ⋮\n 2.0\n 2.0\n 1.0\n 1.0\n 2.0\n 1.0\n 2.0\n 1.0\n 1.0\n 1.0\n 1.0\n 0.0","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Convert a subarray of SnpArray to Float64 matrix using defaults (model=ADDITIVE_MODEL, center=false, scale=false, impute=false).","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"convert(Matrix{Float64}, @view(mouse[1:2:10, 1:2:10]))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"5×5 Array{Float64,2}:\n 1.0  1.0  2.0  2.0  1.0\n 2.0  2.0  2.0  2.0  2.0\n 2.0  2.0  2.0  2.0  2.0\n 1.0  1.0  2.0  2.0  1.0\n 1.0  2.0  1.0  1.0  1.0","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Different SNP models (ADDITIVE_MODEL vs DOMINANT_MODEL vs RECESSIVE_MODEL)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@views [convert(Vector{Float64}, mouse[:, 1], model=ADDITIVE_MODEL) convert(Vector{Float64}, mouse[:, 1], model=DOMINANT_MODEL) convert(Vector{Float64}, mouse[:, 1], model=RECESSIVE_MODEL)]","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×3 Array{Float64,2}:\n 1.0  1.0  0.0\n 1.0  1.0  0.0\n 2.0  1.0  1.0\n 1.0  1.0  0.0\n 2.0  1.0  1.0\n 1.0  1.0  0.0\n 1.0  1.0  0.0\n 1.0  1.0  0.0\n 1.0  1.0  0.0\n 2.0  1.0  1.0\n 2.0  1.0  1.0\n 1.0  1.0  0.0\n 2.0  1.0  1.0\n ⋮         \n 2.0  1.0  1.0\n 2.0  1.0  1.0\n 1.0  1.0  0.0\n 1.0  1.0  0.0\n 2.0  1.0  1.0\n 1.0  1.0  0.0\n 2.0  1.0  1.0\n 1.0  1.0  0.0\n 1.0  1.0  0.0\n 1.0  1.0  0.0\n 1.0  1.0  0.0\n 0.0  0.0  0.0","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Center and scale (last column) while convert","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"convert(Vector{Float64}, @view(mouse[:, end]), center=true, scale=true)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940-element Array{Float64,1}:\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n  -1.8819155626127624\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n  -1.8819155626127624\n  -4.2359771983402785\n   0.4721460731147541\n  -4.2359771983402785\n   ⋮\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n   0.4721460731147541\n NaN\n   0.4721460731147541","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Center, scale, and impute (last column) while convert","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"convert(Vector{Float64}, @view(mouse[:, end]), center=true, scale=true, impute=true)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940-element Array{Float64,1}:\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n -1.8819155626127624\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n -1.8819155626127624\n -4.2359771983402785\n  0.4721460731147541\n -4.2359771983402785\n  ⋮\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n  0.4721460731147541\n  0.0\n  0.4721460731147541","category":"page"},{"location":"#copyto!","page":"SnpArrays.jl Tutorial","title":"copyto!","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"copyto! is the in-place version of convert. It takes the same keyword arguments (model, center, scale, impute) as convert.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Copy a column to a Float64 vector using defaults (model=:additive, center=false, scale=false, impute=false).","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"v = zeros(size(mouse, 1))\ncopyto!(v, @view(mouse[:, 1]))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940-element Array{Float64,1}:\n 1.0\n 1.0\n 2.0\n 1.0\n 2.0\n 1.0\n 1.0\n 1.0\n 1.0\n 2.0\n 2.0\n 1.0\n 2.0\n ⋮\n 2.0\n 2.0\n 1.0\n 1.0\n 2.0\n 1.0\n 2.0\n 1.0\n 1.0\n 1.0\n 1.0\n 0.0","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@btime(copyto!($v, $@view(mouse[:, 1])));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  2.235 μs (0 allocations: 0 bytes)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Copy columns using defaults","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"v2 = zeros(size(mouse, 1), 2)\ncopyto!(v2, @view(mouse[:, 1:2]))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×2 Array{Float64,2}:\n 1.0  1.0\n 1.0  1.0\n 2.0  2.0\n 1.0  1.0\n 2.0  2.0\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n 2.0  2.0\n 2.0  2.0\n 1.0  1.0\n 2.0  2.0\n ⋮    \n 2.0  2.0\n 2.0  2.0\n 1.0  1.0\n 1.0  1.0\n 2.0  2.0\n 1.0  1.0\n 2.0  2.0\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n 0.0  0.0","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# roughly double the cost of copying 1 column\n@btime(copyto!($v2, $@view(mouse[:, 1:2])));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  4.919 μs (0 allocations: 0 bytes)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Center and scale","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"copyto!(v, @view(mouse[:, 1]), center=true, scale=true)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940-element Array{Float64,1}:\n -0.16084075452851265\n -0.16084075452851265\n  1.2624897581484626\n -0.16084075452851265\n  1.2624897581484626\n -0.16084075452851265\n -0.16084075452851265\n -0.16084075452851265\n -0.16084075452851265\n  1.2624897581484626\n  1.2624897581484626\n -0.16084075452851265\n  1.2624897581484626\n  ⋮\n  1.2624897581484626\n  1.2624897581484626\n -0.16084075452851265\n -0.16084075452851265\n  1.2624897581484626\n -0.16084075452851265\n  1.2624897581484626\n -0.16084075452851265\n -0.16084075452851265\n -0.16084075452851265\n -0.16084075452851265\n -1.584171267205488","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# more cost becoz of extra pass for center, scale, and/or impute\n@btime(copyto!($v, $(@view(mouse[:, 1])), center=true, scale=true));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  4.859 μs (0 allocations: 0 bytes)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Looping over all columns","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"v = Vector{Float64}(undef, size(mouse, 1))\nfunction loop_test(v, s)\n    for j in 1:size(s, 2)\n        copyto!(v, @view(s[:, j]))\n    end\nend\n@btime(loop_test($v, $mouse))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  33.304 ms (0 allocations: 0 bytes)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Copy whole SnpArray","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"M = similar(mouse, Float64)\n@btime(copyto!($M, $mouse));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  33.720 ms (0 allocations: 0 bytes)","category":"page"},{"location":"#Impute-missing-genotypes-using-ADMIXTURE-estimates","page":"SnpArrays.jl Tutorial","title":"Impute missing genotypes using ADMIXTURE estimates","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"convert and copyto! can perform more fine-tuned imputation using the ancestry estimates from the ADMIXTURE software.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Step 1: Calculate the ancestry estimate and allele frequencies using ADMIXTURE.jl. Here we assume K=3 populations.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# install ADMIXTURE package first \nusing ADMIXTURE\nif isfile(\"mouse.3.P\") && isfile(\"mouse.3.Q\")\n    P = readdlm(\"mouse.3.P\", ' ', Float64) \n    Q = readdlm(\"mouse.3.Q\", ' ', Float64)\nelse\n    # run ADMIXTURE using 4 threads\n    P, Q = admixture(SnpArrays.datadir(\"mouse.bed\"), 3, j=4)\nend;","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"****                   ADMIXTURE Version 1.3.0                  ****\n****                    Copyright 2008-2015                     ****\n****           David Alexander, Suyash Shringarpure,            ****\n****                John  Novembre, Ken Lange                   ****\n****                                                            ****\n****                 Please cite our paper!                     ****\n****   Information at www.genetics.ucla.edu/software/admixture  ****\n\nParallel execution requested.  Will use 4 threads.\nRandom seed: 43\nPoint estimation method: Block relaxation algorithm\nConvergence acceleration algorithm: QuasiNewton, 3 secant conditions\nPoint estimation will terminate when objective function delta < 0.0001\nEstimation of standard errors disabled; will compute point estimates only.\n\n\n┌ Info: ADMIXTURE command:\n│ `/home/huazhou/.julia/artifacts/316b9c66aef8f67001d54aa86a244d1e769c1e1a/dist/admixture_linux-1.3.0/admixture /home/huazhou/.julia/dev/SnpArrays.jl/data/mouse.bed 3 -j4`\n└ @ ADMIXTURE /home/huazhou/julia_dev/ADMIXTURE.jl/src/ADMIXTURE.jl:57\n┌ Info: Output directory: /home/huazhou/.julia/dev/SnpArrays.jl/docs\n└ @ ADMIXTURE /home/huazhou/julia_dev/ADMIXTURE.jl/src/ADMIXTURE.jl:58\n\n\nSize of G: 1940x10150\nPerforming five EM steps to prime main algorithm\n1 (EM) \tElapsed: 0.754\tLoglikelihood: -2.27484e+07\t(delta): 8.92872e+06\n2 (EM) \tElapsed: 0.754\tLoglikelihood: -2.21886e+07\t(delta): 559814\n3 (EM) \tElapsed: 0.753\tLoglikelihood: -2.20025e+07\t(delta): 186060\n4 (EM) \tElapsed: 0.753\tLoglikelihood: -2.1896e+07\t(delta): 106495\n5 (EM) \tElapsed: 0.755\tLoglikelihood: -2.18274e+07\t(delta): 68590.1\nInitial loglikelihood: -2.18274e+07\nStarting main algorithm\n1 (QN/Block) \tElapsed: 3.222\tLoglikelihood: -2.12515e+07\t(delta): 575921\n2 (QN/Block) \tElapsed: 3.194\tLoglikelihood: -2.10686e+07\t(delta): 182932\n3 (QN/Block) \tElapsed: 3.295\tLoglikelihood: -2.09068e+07\t(delta): 161743\n4 (QN/Block) \tElapsed: 3.353\tLoglikelihood: -2.07604e+07\t(delta): 146489\n5 (QN/Block) \tElapsed: 3.293\tLoglikelihood: -2.07231e+07\t(delta): 37298.4\n6 (QN/Block) \tElapsed: 3.299\tLoglikelihood: -2.07134e+07\t(delta): 9627.91\n7 (QN/Block) \tElapsed: 3.336\tLoglikelihood: -2.07086e+07\t(delta): 4866.55\n8 (QN/Block) \tElapsed: 3.288\tLoglikelihood: -2.07075e+07\t(delta): 1084.44\n9 (QN/Block) \tElapsed: 3.293\tLoglikelihood: -2.07073e+07\t(delta): 211.684\n10 (QN/Block) \tElapsed: 3.291\tLoglikelihood: -2.07072e+07\t(delta): 41.0546\n11 (QN/Block) \tElapsed: 3.289\tLoglikelihood: -2.07072e+07\t(delta): 7.42558\n12 (QN/Block) \tElapsed: 3.301\tLoglikelihood: -2.07072e+07\t(delta): 1.90748\n13 (QN/Block) \tElapsed: 3.293\tLoglikelihood: -2.07072e+07\t(delta): 0.390135\n14 (QN/Block) \tElapsed: 3.3\tLoglikelihood: -2.07072e+07\t(delta): 0.098405\n15 (QN/Block) \tElapsed: 3.303\tLoglikelihood: -2.07072e+07\t(delta): 0.0219686\n16 (QN/Block) \tElapsed: 3.289\tLoglikelihood: -2.07072e+07\t(delta): 0.00373476\n17 (QN/Block) \tElapsed: 3.294\tLoglikelihood: -2.07072e+07\t(delta): 0.000527754\n18 (QN/Block) \tElapsed: 3.294\tLoglikelihood: -2.07072e+07\t(delta): 1.77249e-05\nSummary: \nConverged in 18 iterations (63.882 sec)\nLoglikelihood: -20707210.979052\nFst divergences between estimated populations: \n\tPop0\tPop1\t\nPop0\t\nPop1\t0.141\t\nPop2\t0.120\t0.128\t\nWriting output files.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Step 2: Impute using ancestry estimates P and Q. Note copyto! and convert assumes P has dimension K x S and Q has dimension K x N where K is number of populations, S is number of SNPs, and N is number of individuals. So we need to transpose the output of admixture.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Pt = P |> transpose |> Matrix\nQt = Q |> transpose |> Matrix\nconvert(Matrix{Float64}, mouse, Pt, Qt)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×10150 Array{Float64,2}:\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0  …  2.0      2.0      2.0      2.0\n 1.0  1.0  2.0  1.0  1.0  1.0  1.0     2.0      2.0      2.0      2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0     2.0      2.0      2.0      2.0\n 1.0  1.0  1.0  1.0  1.0  1.0  1.0     2.0      2.0      2.0      2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0     1.0      1.0      1.0      1.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0  …  2.0      2.0      2.0      2.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0     2.0      2.0      2.0      2.0\n 1.0  1.0  2.0  1.0  1.0  1.0  1.0     2.0      2.0      2.0      2.0\n 1.0  1.0  2.0  1.0  1.0  1.0  1.0     2.0      2.0      2.0      2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0     1.0      1.0      1.0      1.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0  …  0.0      0.0      0.0      0.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0     2.0      2.0      2.0      2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0     0.0      0.0      0.0      0.0\n ⋮                        ⋮         ⋱                             \n 2.0  2.0  2.0  2.0  2.0  2.0  2.0     2.0      2.0      2.0      2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0     2.0      2.0      2.0      2.0\n 1.0  1.0  1.0  1.0  1.0  1.0  1.0  …  2.0      2.0      2.0      2.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0     2.0      2.0      2.0      2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0     2.0      2.0      2.0      2.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0     2.0      2.0      2.0      2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0     2.0      2.0      2.0      2.0\n 1.0  1.0  1.0  1.0  2.0  1.0  2.0  …  2.0      2.0      2.0      2.0\n 1.0  1.0  2.0  1.0  1.0  1.0  1.0     2.0      2.0      2.0      2.0\n 1.0  1.0  2.0  1.0  1.0  1.0  1.0     2.0      2.0      2.0      2.0\n 1.0  1.0  1.0  1.0  1.0  1.0  1.0     1.89365  1.89217  1.89207  1.89207\n 0.0  0.0  0.0  0.0  2.0  0.0  2.0     2.0      2.0      2.0      2.0","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# takes slightly longer because of calculation involving P and Q\nM = similar(mouse, Float64)\n@btime(copyto!($M, $mouse, $Pt, $Qt));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  91.494 ms (0 allocations: 0 bytes)","category":"page"},{"location":"#Summaries","page":"SnpArrays.jl Tutorial","title":"Summaries","text":"","category":"section"},{"location":"#Counts","page":"SnpArrays.jl Tutorial","title":"Counts","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Counts of each the four possible values for each column are returned by counts.`","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"counts(mouse, dims=1)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"4×10150 Array{Int64,2}:\n  358   359  252   358    33   359  …    56    56    56    56    56    56\n    2     0    4     3     4     1      173   173   162   173   174   175\n 1003  1004  888  1004   442  1004      242   242   242   242   242   242\n  577   577  796   575  1461   576     1469  1469  1480  1469  1468  1467","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Column 2 has no missing values (code 0x01, the second row in the column-counts table). In that SNP position for this sample, 359 indivduals are homozygous allele 1 (G according to the .bim file), 1004 are heterozygous, and 577 are homozygous allele 2 (A).","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"The counts by column and by row are cached in the SnpArray object. Accesses after the first are extremely fast.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@btime(counts($mouse, dims=1));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  3.495 ns (0 allocations: 0 bytes)","category":"page"},{"location":"#Minor-allele-frequencies","page":"SnpArrays.jl Tutorial","title":"Minor allele frequencies","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Minor allele frequencies (MAF) for each SNP.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"maf(mouse)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"10150-element Array{Float64,1}:\n 0.4434984520123839\n 0.4438144329896907\n 0.359504132231405\n 0.4439855446566856\n 0.13119834710743805\n 0.44404332129963897\n 0.1412706611570248\n 0.30299123259412064\n 0.4445018069179143\n 0.44424367578729995\n 0.43427835051546393\n 0.14075413223140498\n 0.304639175257732\n ⋮\n 0.0527624309392265\n 0.052980132450331174\n 0.08079096045197742\n 0.08253250423968339\n 0.08253250423968339\n 0.10022650056625138\n 0.10016977928692694\n 0.10016977928692694\n 0.09955005624296964\n 0.10016977928692694\n 0.10022650056625138\n 0.10028328611898019","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Minor allele (false means A1 is the minor allele; true means A2 is the minor allele) for each SNP.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"minorallele(mouse)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"10150-element BitArray{1}:\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n ⋮\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0\n 0","category":"page"},{"location":"#mean-and-var","page":"SnpArrays.jl Tutorial","title":"mean and var","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"The package provides methods for the generics mean and var from the Statistics package.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"mean(mouse, dims=1)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1×10150 Array{Float64,2}:\n 1.113  1.11237  1.28099  1.11203  …  1.8009  1.79966  1.79955  1.79943","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"mean(mouse, dims=1, model=DOMINANT_MODEL)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1×10150 Array{Float64,2}:\n 0.815273  0.814948  0.869835  0.815178  …  0.968308  0.96829  0.968272","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"var(mouse, dims=1)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1×10150 Array{Float64,2}:\n 0.469929  0.470089  0.462605  0.469365  …  0.223714  0.223818  0.223923","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"These methods make use of the cached column or row counts and thus are very fast","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@btime(mean($mouse, dims=1));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  9.919 μs (2 allocations: 79.39 KiB)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"The column-wise or row-wise standard deviations are returned by std.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"std(mouse, dims=2)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×1 Array{Float64,2}:\n 0.6504997290784408\n 0.6379008244533891\n 0.6558172726141286\n 0.6532675479248437\n 0.6744432174014563\n 0.6519092298111158\n 0.6779881845456428\n 0.6955814098050999\n 0.6437566832989493\n 0.6505283141088536\n 0.665444994623426\n 0.659392039592328\n 0.6641674726999468\n ⋮\n 0.6599158250006595\n 0.688387450736178\n 0.6664063015924304\n 0.6613451651895259\n 0.6659810347614777\n 0.6274577846909379\n 0.6823658517777204\n 0.6695299551061924\n 0.710756592739754\n 0.6387913736114869\n 0.6736492722732016\n 0.688855476425891","category":"page"},{"location":"#Missing-rate","page":"SnpArrays.jl Tutorial","title":"Missing rate","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Proportion of missing genotypes","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"missingrate(mouse, 1)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"10150-element Array{Float64,1}:\n 0.0010309278350515464\n 0.0\n 0.002061855670103093\n 0.0015463917525773195\n 0.002061855670103093\n 0.0005154639175257732\n 0.002061855670103093\n 0.0005154639175257732\n 0.0015463917525773195\n 0.0015463917525773195\n 0.0\n 0.002061855670103093\n 0.0\n ⋮\n 0.06701030927835051\n 0.06597938144329897\n 0.08762886597938144\n 0.08814432989690722\n 0.08814432989690722\n 0.08969072164948454\n 0.08917525773195877\n 0.08917525773195877\n 0.08350515463917525\n 0.08917525773195877\n 0.08969072164948454\n 0.09020618556701031","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"missingrate(mouse, 2)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940-element Array{Float64,1}:\n 0.00019704433497536947\n 0.0\n 0.018423645320197045\n 0.0007881773399014779\n 0.0\n 0.004236453201970443\n 0.0051231527093596055\n 0.00039408866995073894\n 0.005517241379310344\n 0.0016748768472906405\n 0.0\n 9.852216748768474e-5\n 0.0004926108374384236\n ⋮\n 0.000689655172413793\n 0.004729064039408867\n 0.0004926108374384236\n 0.001083743842364532\n 0.00019704433497536947\n 0.0025615763546798028\n 0.0038423645320197044\n 0.001379310344827586\n 0.0064039408866995075\n 0.002857142857142857\n 0.0011822660098522167\n 0.00029556650246305416","category":"page"},{"location":"#Location-of-the-missing-values","page":"SnpArrays.jl Tutorial","title":"Location of the missing values","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"The positions of the missing data are evaluated by","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"mp = missingpos(mouse)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×10150 SparseArrays.SparseMatrixCSC{Bool,Int32} with 33922 stored entries:\n  [702 ,     1]  =  1\n  [949 ,     1]  =  1\n  [914 ,     3]  =  1\n  [949 ,     3]  =  1\n  [1604,     3]  =  1\n  [1891,     3]  =  1\n  [81  ,     4]  =  1\n  [990 ,     4]  =  1\n  [1882,     4]  =  1\n  [81  ,     5]  =  1\n  [676 ,     5]  =  1\n  [990 ,     5]  =  1\n  ⋮\n  [1789, 10150]  =  1\n  [1791, 10150]  =  1\n  [1795, 10150]  =  1\n  [1846, 10150]  =  1\n  [1848, 10150]  =  1\n  [1851, 10150]  =  1\n  [1853, 10150]  =  1\n  [1860, 10150]  =  1\n  [1873, 10150]  =  1\n  [1886, 10150]  =  1\n  [1894, 10150]  =  1\n  [1897, 10150]  =  1\n  [1939, 10150]  =  1","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@btime(missingpos($mouse));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  22.649 ms (19272 allocations: 1.80 MiB)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"So, for example, the number of missing data values in each column can be evaluated as","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"sum(mp, dims=1)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1×10150 Array{Int64,2}:\n 2  0  4  3  4  1  4  1  3  3  0  4  0  …  174  173  173  162  173  174  175","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"although it is faster, but somewhat more obscure, to use","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"view(counts(mouse, dims=1), 2:2, :)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1×10150 view(::Array{Int64,2}, 2:2, :) with eltype Int64:\n 2  0  4  3  4  1  4  1  3  3  0  4  0  …  174  173  173  162  173  174  175","category":"page"},{"location":"#Genetic-relationship-matrix-(GRM)","page":"SnpArrays.jl Tutorial","title":"Genetic relationship matrix (GRM)","text":"","category":"section"},{"location":"#Homogenous-population","page":"SnpArrays.jl Tutorial","title":"Homogenous population","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"For homogenous population, grm function computes the empirical kinship matrix using either the classical genetic relationship matrix, grm(A, model=:GRM), or the method of moment method, grm(A, model=:MoM), or the robust method, grm(A, model=:Robust). See the section Kinship Comparison of the manuscript for the formulae and references for these methods. ","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Classical genetic relation matrix","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# grm(mouse, method=:MoM)\n# grm(mouse, method=:Robust)\ng = grm(mouse, method=:GRM)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×1940 Array{Float64,2}:\n  0.478301    -0.0331304    0.0135612    …  -0.0347737   -0.0129443\n -0.0331304    0.422771    -0.0389227        0.0457987    0.00556832\n  0.0135612   -0.0389227    0.509248        -0.0356689   -0.0608705\n  0.0198205    0.00728645  -0.00935362      -0.0302404   -0.0102152\n  0.056747    -0.0163418   -0.00495283      -0.0413347   -0.0415659\n -0.0165628   -0.0191127   -0.0112181    …   0.0177118   -0.0193087\n  0.123771    -0.0404167    0.00442739       0.00880649  -0.0437565\n -0.0628362    0.172552    -0.0728312        0.0640027   -0.0281429\n  0.0605018   -0.0260505    0.00398852      -0.00277754  -0.0607773\n  0.108886    -0.0204594   -0.00767711      -0.0210501    0.00343526\n -0.0142307    0.00270989  -0.0235504    …  -0.0223563   -0.028408\n -0.0306022    0.197743    -0.00244269       0.0213998   -0.0478472\n -0.0131463   -0.0226707    0.0223522       -0.037288     0.0493662\n  ⋮                                      ⋱               \n  0.0176725   -0.0165609    0.0378308        0.0238751   -0.0420143\n  0.0024949   -0.0411137    0.0154847       -0.0380656   -0.0650806\n  0.0952286    0.00894298  -0.0163446    …  -0.0202633   -0.0219594\n -0.0309488   -0.0228342   -0.0478253       -0.014896     0.261623\n -0.004804    -0.0375168   -0.0211418       -0.0172572    0.0359166\n  0.0076296    0.0481887   -0.0328968        0.0920425   -0.0292548\n  0.070045    -0.0302138    0.000647283      0.00892069  -0.00632566\n  0.0378132   -6.59565e-5   0.00888932   …   0.00230815  -0.0291622\n -0.00132837   0.00223654   0.0495928       -0.00936248   0.0299075\n  0.0640864   -0.0241218    0.00602283       0.00403413   0.00689551\n -0.0347737    0.0457987   -0.0356689        0.509228    -0.035215\n -0.0129443    0.00556832  -0.0608705       -0.035215     0.552712","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@btime(grm($mouse, method=:GRM));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  456.543 ms (15 allocations: 28.95 MiB)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Using Float32 (single precision) potentially saves memory usage and computation time.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"grm(mouse, method=:GRM, t=Float32)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×1940 Array{Float32,2}:\n  0.478301    -0.0331304    0.0135612    …  -0.0347737   -0.0129443\n -0.0331304    0.422772    -0.0389227        0.0457987    0.00556832\n  0.0135612   -0.0389227    0.509248        -0.0356689   -0.0608705\n  0.0198205    0.00728645  -0.00935361      -0.0302404   -0.0102152\n  0.056747    -0.0163418   -0.00495283      -0.0413347   -0.0415659\n -0.0165628   -0.0191127   -0.0112181    …   0.0177118   -0.0193087\n  0.123771    -0.0404167    0.0044274        0.0088065   -0.0437565\n -0.0628362    0.172552    -0.0728312        0.0640027   -0.0281429\n  0.0605018   -0.0260505    0.00398852      -0.00277753  -0.0607773\n  0.108886    -0.0204594   -0.00767711      -0.0210501    0.00343526\n -0.0142307    0.00270989  -0.0235504    …  -0.0223563   -0.028408\n -0.0306022    0.197743    -0.00244269       0.0213998   -0.0478472\n -0.0131463   -0.0226707    0.0223522       -0.037288     0.0493662\n  ⋮                                      ⋱               \n  0.0176725   -0.016561     0.0378308        0.0238751   -0.0420143\n  0.0024949   -0.0411137    0.0154847       -0.0380656   -0.0650806\n  0.0952286    0.00894298  -0.0163446    …  -0.0202633   -0.0219594\n -0.0309488   -0.0228342   -0.0478253       -0.014896     0.261623\n -0.00480403  -0.0375168   -0.0211418       -0.0172572    0.0359166\n  0.0076296    0.0481887   -0.0328968        0.0920425   -0.0292547\n  0.070045    -0.0302138    0.000647274      0.00892069  -0.00632567\n  0.0378132   -6.59605f-5   0.00888932   …   0.00230816  -0.0291622\n -0.00132836   0.00223653   0.0495928       -0.00936246   0.0299075\n  0.0640864   -0.0241219    0.00602283       0.00403414   0.0068955\n -0.0347737    0.0457987   -0.0356689        0.509228    -0.035215\n -0.0129443    0.00556832  -0.0608705       -0.035215     0.552712","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@btime(grm($mouse, method=:GRM, t=Float32));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  168.607 ms (16 allocations: 14.60 MiB)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"By default, grm exlcudes SNPs with minor allele frequency below 0.01. This can be changed by the keyword argument minmaf.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# compute GRM excluding SNPs with MAF≤0.05 \ngrm(mouse, minmaf=0.05)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×1940 Array{Float64,2}:\n  0.478556    -0.0331783    0.013541     …  -0.0348225   -0.0129761\n -0.0331783    0.422993    -0.0389741        0.0457975    0.00554753\n  0.013541    -0.0389741    0.50952         -0.0357183   -0.0609305\n  0.0203209    0.00777944  -0.00887047      -0.0297696   -0.00972836\n  0.0567523   -0.0163798   -0.00498406      -0.0413874   -0.0416146\n -0.0166009   -0.0191523   -0.0112531    …   0.0176939   -0.0193442\n  0.123816    -0.0404689    0.00440171       0.0087834   -0.0438065\n -0.0629017    0.172626    -0.0729026        0.0640123   -0.0281836\n  0.0605093   -0.0260942    0.00396257      -0.00280748  -0.0608373\n  0.108922    -0.0204998   -0.00770996      -0.0210909    0.00341321\n -0.0142674    0.00268319  -0.0235927    …  -0.0223978   -0.0284489\n -0.0306486    0.197832    -0.00247243       0.0213842   -0.0478996\n -0.0131824   -0.0227124    0.0223371       -0.0373384    0.0493713\n  ⋮                                      ⋱               \n  0.0176546   -0.016599     0.0378249        0.0238609   -0.0420633\n  0.00246808  -0.0411663    0.0154656       -0.0381165   -0.0651432\n  0.0952566    0.00891997  -0.0163826    …  -0.0203036   -0.0219965\n -0.0309912   -0.0228718   -0.0478777       -0.0149289    0.261754\n -0.00483514  -0.0375673   -0.0211827       -0.0172957    0.0359138\n  0.00770862   0.0482917   -0.0328417        0.0921714   -0.0292961\n  0.0700582   -0.03026      0.000619365      0.00889767  -0.00635348\n  0.0378313   -7.02155e-5   0.00889036   …   0.0023053   -0.0291795\n -0.00133338   0.00223364   0.0496179       -0.00937223   0.0299252\n  0.0641201   -0.0241403    0.00602217       0.0040323    0.00689958\n -0.0348225    0.0457975   -0.0357183        0.509501    -0.0352599\n -0.0129761    0.00554753  -0.0609305       -0.0352599    0.553015","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"To specify specific SNPs for calculating empirical kinship, use the cinds keyword (default is nothing). When cinds is specified, minmaf is ignored.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# GRM using every other SNP\ngrm(mouse, cinds=1:2:size(mouse, 2))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1940×1940 Array{Float64,2}:\n  0.477       -0.0307774     0.0118026   …  -0.0320301    -0.0125113\n -0.0307774    0.425085     -0.0367459       0.0480442     0.00519065\n  0.0118026   -0.0367459     0.505038       -0.0385129    -0.0631557\n  0.0166017    0.00614789   -0.00919695     -0.0399744    -0.0104884\n  0.05724     -0.0122148    -0.00543377     -0.0395663    -0.0372998\n -0.0193129   -0.0224378    -0.009277    …   0.0153785    -0.0220184\n  0.12194     -0.0410682     0.00274307      0.00796748   -0.0441578\n -0.0624031    0.173985     -0.0724784       0.0663191    -0.0294243\n  0.0627626   -0.0288615     0.00265615     -0.00449877   -0.0579702\n  0.110878    -0.0232715    -0.00881604     -0.021272      0.00169016\n -0.00800735  -0.00149824   -0.019791    …  -0.024124     -0.0289397\n -0.0272944    0.19894      -0.00534771      0.0209384    -0.0511051\n -0.011388    -0.0281003     0.0273853      -0.0360047     0.0459359\n  ⋮                                      ⋱                \n  0.0169431   -0.0136989     0.0340794       0.0272811    -0.041189\n  0.00201325  -0.0426611     0.0124353      -0.0387982    -0.0656181\n  0.097587     0.0058123    -0.0160698   …  -0.021457     -0.023226\n -0.0342014   -0.0211246    -0.0490112      -0.0129575     0.256552\n -0.00324255  -0.0423482    -0.0192699      -0.0149015     0.0339388\n  0.00575353   0.0464237    -0.0294694       0.0924759    -0.0275451\n  0.0748725   -0.0258461    -0.00141068      0.0115232    -0.00486589\n  0.0386555    0.000612169   0.00959997  …  -0.000357284  -0.0334687\n -0.00343056   0.0120673     0.0455375      -0.0103798     0.0336959\n  0.0656909   -0.0193469     0.00600815      0.00188545    0.00726181\n -0.0320301    0.0480442    -0.0385129       0.513285     -0.0317963\n -0.0125113    0.00519065   -0.0631557      -0.0317963     0.54471","category":"page"},{"location":"#Inhomogenous/admixed-populations","page":"SnpArrays.jl Tutorial","title":"Inhomogenous/admixed populations","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"For inhomogenous/admixed population, we recommend first estimate the ancestry and pupulation allele frequencies using the ADMIXTURE software. See ADMIXTURE.jl for usage. Then compute the kinship coefficients using the P (allele frequencies) and Q (ancestry fractions) matrix from the output of ADMIXTURE. This is essentially what the REAP software does, except our implementation runs much faster than REAP (>50 fold speedup). ","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# first read in the P and Q matrix output from ADMIXTURE and tranpose them\nPt = readdlm(\"mouse.3.P\", ' ', Float64) |> transpose |> Matrix\nQt = readdlm(\"mouse.3.Q\", ' ', Float64) |> transpose |> Matrix;","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.grm_admixture(mouse, Pt, Qt)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"convert genotype: 0.17 seconds\nΦ = GG': 0.35 seconds\nconvert G to {0,1} matrix: 0.01 seconds\nS = GG': 0.12 seconds\n\n\n\n\n\n1940×1940 Array{Float64,2}:\n  0.459157     -0.0156932    -0.00323859  …  -0.0241031     0.0122942\n -0.0156932     0.382541     -0.00891406      0.00213633    0.0256827\n -0.00323859   -0.00891406    0.488814       -0.0171977    -0.046833\n  0.00309653    0.0202298    -0.0243852      -0.0176487     0.000560896\n  0.0332112     0.00312467   -0.0272922      -0.0327539    -0.0122725\n -0.0358109    -0.00853754   -0.0271514   …   0.0243008    -0.00138403\n  0.121113     -0.0392918     0.00165843      0.0108529    -0.0377002\n -0.0449198     0.10156      -0.0339267       0.0239007    -0.0152297\n  0.0448066    -0.00136634   -0.0145567       0.00912358   -0.0448302\n  0.0907813     0.0141714    -0.0255689      -0.0029764     0.00990252\n  0.00337646    0.0022767    -0.00875798  …  -0.0258833    -0.0459812\n -0.0177262     0.145082      0.030058       -0.0133903    -0.0327256\n  0.000957255  -0.00906896    0.029328       -0.0270566     0.0232713\n  ⋮                                       ⋱                \n -0.00488405    0.000742107   0.0151453       0.0414035    -0.0193764\n -0.0206988    -0.0165347    -0.0109314      -0.0255689    -0.0508723\n  0.0604747     0.0196284    -0.0426789   …  -0.0174935     0.027048\n -0.00510927   -0.00671173   -0.0330136      -0.0063972     0.21654\n  0.0203133    -0.0184515    -0.0104571      -0.000598233  -0.020399\n  0.0143139     0.012726     -0.0201427       0.0734971    -0.0175891\n  0.0431031    -0.0226697    -0.0277297       0.0145732     0.0375869\n  0.00723518    0.010699     -0.0187391   …   0.00859219    0.00929042\n -0.0282601     0.0197691     0.0164642       0.0038118     0.048468\n  0.0376865    -0.0080739    -0.0201107       0.0180008     0.0385872\n -0.0241031     0.00213633   -0.0171977       0.501371     -0.0266087\n  0.0122942     0.0256827    -0.046833       -0.0266087     0.511511","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# clean up\nrm(\"mouse.3.P\", force = true)\nrm(\"mouse.3.Q\", force = true)","category":"page"},{"location":"#Filtering","page":"SnpArrays.jl Tutorial","title":"Filtering","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Before GWAS, we often need to filter SNPs and/or samples according to genotyping success rates, minor allele frequencies, and Hardy-Weinberg Equilibrium test. This can be achieved by the filter function.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.filter","category":"page"},{"location":"#SnpArrays.filter","page":"SnpArrays.jl Tutorial","title":"SnpArrays.filter","text":"SnpArrays.filter(s)\n\nFilter a SnpArray according to genotyping success rate, minor allele frequencies,  and/or Hardy-Weinberg test.\n\nInput\n\ns: a SnpArray or Plink file name without the bim, fam, bed suffix.\n\nKeyword argument\n\nmin_success_rate_per_row: Threshold for SNP genotyping success rate. Default 0.98. \nmin_success_rate_per_col: Threshold for person genotyping success rate. Default 0.98. \nmin_maf: Minimum minor allele frequency. Default 0.01.\nmin_hwe_pval: Minimum p-value for Hardy-Weinberg test. Default 0 (not filter HWE).\nmaxiters: Maximum number of filtering iterations. Default is 5.\nverbose: Show progress.\n\nOutput\n\nrmask: BitVector indicating rows after filtering.\ncmask: BitVector indicating columns after filtering.\n\n\n\n\n\nSnpArrays.filter(src, rowinds, colinds; des = src * \".filtered\")\n\nFilter src Plink files according to row indices rowinds and column indices  colinds and write to a new set of Plink files des.\n\nInput\n\nsrc: source Plink file name without suffix \".bed\", \".fam\" or \".bim\".\nrowinds: row indices.\ncolinds: column indices.\n\nKeyword arguments\n\ndes: output Plink file name; default is src * \".filtered\".\n\n\n\n\n\nSnpArrays.filter(srcbedfile, srcbimfile, srcfamfile, rowinds, colinds; des = src * \".filtered\")\n\nFilter Plink files  with .gz format or differently named bim and bed files according to row indices  rowinds and column indices colinds and write to a new set of Plink files des.\n\nInput\n\nsrcbedfile: bed file name with suffix such as .bed or .bed.gz.\nsrcbimfile: bed file name with suffix such as .bim or .bim.gz.\nsrcfamfile: bed file name with suffix such as .fam or .fam.gz.\nrowinds: row indices.\ncolinds: column indices.\n\nKeyword arguments\n\ndes: output Plink file name; default is src * \".filtered\".\n\n\n\n\n\n","category":"function"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"By default, it outputs row and column index vectors such that sample-wise and SNP-wise genotyping success rate are at least 0.98 and minor allele frequencies are at least 0.01. User can opt to filter according to Hardy-Weinberg test by setting the minumum p-value min_hwe_pval.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"rowmask, colmask =  SnpArrays.filter(mouse)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"(Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1  …  1, 1, 1, 1, 1, 1, 1, 1, 1, 1], Bool[1, 1, 1, 1, 1, 1, 1, 1, 1, 1  …  0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"count(rowmask), count(colmask)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"(1931, 10072)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@btime(SnpArrays.filter($mouse, min_success_rate_per_row=0.999, min_success_rate_per_col=0.999));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  81.107 ms (11459 allocations: 171.28 MiB)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"One may use the rowmask and colmask to filter and save filtering result as Plink files.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.filter(SnpArrays.datadir(\"mouse\"), rowmask, colmask)","category":"page"},{"location":"#Filter-Plink-files","page":"SnpArrays.jl Tutorial","title":"Filter Plink files","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Filter a set of Plink files according to row indices and column indices. By result, filtered Plink files are saved as srcname.filtered.bed, srcname.filtered.fam, and srcname.filtered.bim, where srcname is the source Plink file name. You can also specify destimation file name using keyword des.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.filter(SnpArrays.datadir(\"mouse\"), 1:5, 1:5)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"5×5 SnpArray:\n 0x02  0x02  0x02  0x02  0x03\n 0x02  0x02  0x03  0x02  0x02\n 0x03  0x03  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02\n 0x03  0x03  0x03  0x03  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# clean up\nrm(SnpArrays.datadir(\"mouse.filtered.bed\"), force=true)\nrm(SnpArrays.datadir(\"mouse.filtered.fam\"), force=true)\nrm(SnpArrays.datadir(\"mouse.filtered.bim\"), force=true)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Filter a set of Plink files according to logical vectors.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.filter(SnpArrays.datadir(\"mouse\"), rowmask, colmask)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1931×10072 SnpArray:\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x02  0x03  0x02  0x02  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x03  0x00  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x00  0x00  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02     0x03  0x03  0x03  0x00  0x00  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x03  0x02  0x02  0x02  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02  …  0x03  0x00  0x00  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x00  0x03  0x00  0x00\n 0x02  0x02  0x03  0x02  0x02  0x02     0x00  0x03  0x03  0x00  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x00  0x03  0x00  0x00  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x03  0x02  0x02  0x02  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03  …  0x03  0x03  0x00  0x03  0x00  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x00  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x00  0x00  0x03  0x03  0x03\n    ⋮                             ⋮  ⋱                             ⋮  \n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x00  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03  …  0x03  0x03  0x03  0x00  0x00  0x00\n 0x02  0x02  0x02  0x02  0x02  0x02     0x03  0x03  0x03  0x00  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x00  0x03  0x00  0x00  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x00  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x00  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03  …  0x02  0x03  0x03  0x00  0x03  0x03\n 0x02  0x02  0x02  0x02  0x03  0x02     0x03  0x03  0x00  0x03  0x03  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x00  0x00  0x03  0x00  0x03\n 0x02  0x02  0x03  0x02  0x02  0x02     0x03  0x03  0x00  0x03  0x03  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02     0x03  0x00  0x00  0x03  0x03  0x03\n 0x00  0x00  0x00  0x00  0x03  0x00  …  0x03  0x03  0x00  0x03  0x00  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"readdir(glob\"mouse.filtered.*\", datapath)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"3-element Array{String,1}:\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/mouse.filtered.bed\"\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/mouse.filtered.bim\"\n \"/home/huazhou/.julia/dev/SnpArrays.jl/data/mouse.filtered.fam\"","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# clean up\nrm(SnpArrays.datadir(\"mouse.filtered.bed\"), force=true)\nrm(SnpArrays.datadir(\"mouse.filtered.fam\"), force=true)\nrm(SnpArrays.datadir(\"mouse.filtered.bim\"), force=true)","category":"page"},{"location":"#Concatenating-SnpArrays","page":"SnpArrays.jl Tutorial","title":"Concatenating SnpArrays","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Concatenation of SnpArrays is implemented in hcat, vcat, and hvcat functions. By default, the resulting .bed file is saved as a file beginning with tmp_ in the working directory. You can specify destination using keyword des. ","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"For concatenation, SnpArray arguments do not deal with .fam or .bim files at all. You can use SnpData as the arguments to create those files (see below).","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"s = SnpArrays.filter(SnpArrays.datadir(\"mouse\"), 1:2, 1:3)\ns","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"2×3 SnpArray:\n 0x02  0x02  0x02\n 0x02  0x02  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"all(s .== [[0x02 0x02 0x02];\n[0x02 0x02 0x03]])","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"true","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Standard concatenation works just like any other arrays. However, a temporary file is created as a side effect.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"[s s s]","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"2×9 SnpArray:\n 0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02\n 0x02  0x02  0x03  0x02  0x02  0x03  0x02  0x02  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"[s; s; s]","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"6×3 SnpArray:\n 0x02  0x02  0x02\n 0x02  0x02  0x03\n 0x02  0x02  0x02\n 0x02  0x02  0x03\n 0x02  0x02  0x02\n 0x02  0x02  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"[s s s; s s s]","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"4×9 SnpArray:\n 0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02\n 0x02  0x02  0x03  0x02  0x02  0x03  0x02  0x02  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02\n 0x02  0x02  0x03  0x02  0x02  0x03  0x02  0x02  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"readdir(glob\"tmp_*\", \".\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"3-element Array{String,1}:\n \"./tmp_hcat_arr_1.bed\"\n \"./tmp_hvcat_arr_1.bed\"\n \"./tmp_vcat_arr_1.bed\"","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"In order to set the destination .bed file, you can add the keyword argument des.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"hcat(s, s, s; des=SnpArrays.datadir(\"mouse.test.hcat\"))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"2×9 SnpArray:\n 0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02\n 0x02  0x02  0x03  0x02  0x02  0x03  0x02  0x02  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"vcat(s, s, s; des=SnpArrays.datadir(\"mouse.test.vcat\"))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"6×3 SnpArray:\n 0x02  0x02  0x02\n 0x02  0x02  0x03\n 0x02  0x02  0x02\n 0x02  0x02  0x03\n 0x02  0x02  0x02\n 0x02  0x02  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"hvcat((3, 3), s, s, s, s, s, s; des=SnpArrays.datadir(\"mouse.test.hvcat\"))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"4×9 SnpArray:\n 0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02\n 0x02  0x02  0x03  0x02  0x02  0x03  0x02  0x02  0x03\n 0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02  0x02\n 0x02  0x02  0x03  0x02  0x02  0x03  0x02  0x02  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# clean up\nrm(SnpArrays.datadir(\"mouse.filtered.bed\"), force=true)\nrm(SnpArrays.datadir(\"mouse.filtered.fam\"), force=true)\nrm(SnpArrays.datadir(\"mouse.filtered.bim\"), force=true)\ntmplist = readdir(glob\"tmp_*.bed\", \".\")\nfor f in tmplist\n    rm(f, force=true)\nend\nrm(SnpArrays.datadir(\"mouse.test.hcat.bed\"), force=true)\nrm(SnpArrays.datadir(\"mouse.test.vcat.bed\"), force=true)\nrm(SnpArrays.datadir(\"mouse.test.hvcat.bed\"), force=true)","category":"page"},{"location":"#Linear-Algebra","page":"SnpArrays.jl Tutorial","title":"Linear Algebra","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"In some applications we want to perform linear algebra using SnpArray directly without expanding it to numeric matrix. This is achieved in three different structs:","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Direct operations on a plink-formatted SnpArray: SnpLinAlg\nOperations on transformed BitMatrixes: SnpBitMatrix\nDirect operations on a plink-formatted data on an Nvidia GPU: CuSnpArray.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpLinAlg and SnpBitMatrix use Chris Elrod's LoopVectorization.jl internally. It is much faster on machines with AVX support. CuSnpArray uses CUDA.jl internally.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"warning: deprecated SnpBitMatrix\nSnpBitMatrix is now deprecated in favor of SnpLinAlg.  SnpBitMatrix will be removed on next minor release.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"The implementation assumes that the matrix corresponding to SnpArray is the matrix of the A2 allele counts. SnpLinAlg and CuSnpArray impute any missing genotype with its column mean by default. They can also configured to impute missing genotypes with zero. SnpBitMatrix can only impute missing values with zero. ","category":"page"},{"location":"#Constructor-2","page":"SnpArrays.jl Tutorial","title":"Constructor","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"First let's load a data set without missing genotypes.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"const EUR = SnpArray(SnpArrays.datadir(\"EUR_subset.bed\"))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"379×54051 SnpArray:\n 0x03  0x03  0x03  0x02  0x02  0x03  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x02  0x03  0x02  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x03  0x03  0x03     0x02  0x02  0x02  0x03  0x03  0x02\n 0x03  0x03  0x03  0x00  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x00  0x03  0x03     0x02  0x02  0x02  0x03  0x03  0x03\n 0x02  0x03  0x03  0x03  0x03  0x03  …  0x03  0x03  0x03  0x03  0x03  0x02\n 0x02  0x03  0x03  0x02  0x02  0x03     0x03  0x03  0x02  0x02  0x03  0x03\n 0x02  0x03  0x03  0x03  0x02  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x00  0x02  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x03  0x03  0x02  0x03  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x02  0x03  0x03  …  0x03  0x03  0x02  0x02  0x03  0x03\n 0x03  0x03  0x03  0x02  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x02\n 0x03  0x02  0x03  0x02  0x02  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n    ⋮                             ⋮  ⋱     ⋮                             ⋮\n 0x03  0x03  0x03  0x00  0x02  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x02  0x02  0x03     0x02  0x02  0x02  0x03  0x02  0x03\n 0x03  0x03  0x03  0x02  0x02  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x03  0x03  0x02  0x03  0x03  …  0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x00  0x00  0x03     0x02  0x02  0x02  0x03  0x03  0x03\n 0x02  0x03  0x03  0x03  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x02  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x02  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x03  0x03  0x03  0x03  0x03  …  0x03  0x03  0x02  0x02  0x03  0x03\n 0x03  0x03  0x03  0x00  0x03  0x03     0x03  0x03  0x03  0x03  0x03  0x03\n 0x02  0x03  0x03  0x02  0x00  0x02     0x03  0x03  0x03  0x03  0x03  0x03\n 0x03  0x03  0x03  0x02  0x02  0x03     0x03  0x03  0x03  0x03  0x03  0x03","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"To instantiate a SnpLinAlg based on SnpArray,","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"const EURsla = SnpLinAlg{Float64}(EUR, model=ADDITIVE_MODEL, center=true, scale=true)\nconst EURsla_ = SnpLinAlg{Float64}(EUR, model=ADDITIVE_MODEL, center=true, scale=true, impute=false)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"379×54051 SnpLinAlg{Float64}:\n  0.46516   0.163517  0.306468  -0.0298581  …   0.342518   0.163517   0.23281\n  0.46516  -6.0338    0.306468  -0.0298581      0.342518   0.163517   0.23281\n  0.46516   0.163517  0.306468   1.38467        0.342518   0.163517  -4.17894\n  0.46516   0.163517  0.306468  -1.44439        0.342518   0.163517   0.23281\n  0.46516   0.163517  0.306468  -1.44439        0.342518   0.163517   0.23281\n -1.91722   0.163517  0.306468   1.38467    …   0.342518   0.163517  -4.17894\n -1.91722   0.163517  0.306468  -0.0298581     -2.7483     0.163517   0.23281\n -1.91722   0.163517  0.306468   1.38467        0.342518   0.163517   0.23281\n  0.46516   0.163517  0.306468  -1.44439        0.342518   0.163517   0.23281\n -1.91722   0.163517  0.306468  -0.0298581      0.342518   0.163517   0.23281\n  0.46516   0.163517  0.306468  -0.0298581  …  -2.7483     0.163517   0.23281\n  0.46516   0.163517  0.306468  -0.0298581      0.342518   0.163517  -4.17894\n  0.46516  -6.0338    0.306468  -0.0298581      0.342518   0.163517   0.23281\n  ⋮                                         ⋱                         ⋮\n  0.46516   0.163517  0.306468  -1.44439        0.342518   0.163517   0.23281\n  0.46516   0.163517  0.306468  -0.0298581      0.342518  -6.0338     0.23281\n  0.46516   0.163517  0.306468  -0.0298581      0.342518   0.163517   0.23281\n -1.91722   0.163517  0.306468  -0.0298581  …   0.342518   0.163517   0.23281\n  0.46516   0.163517  0.306468  -1.44439        0.342518   0.163517   0.23281\n -1.91722   0.163517  0.306468   1.38467        0.342518   0.163517   0.23281\n  0.46516   0.163517  0.306468  -0.0298581      0.342518   0.163517   0.23281\n  0.46516   0.163517  0.306468  -0.0298581      0.342518   0.163517   0.23281\n -1.91722   0.163517  0.306468   1.38467    …  -2.7483     0.163517   0.23281\n  0.46516   0.163517  0.306468  -1.44439        0.342518   0.163517   0.23281\n -1.91722   0.163517  0.306468  -0.0298581      0.342518   0.163517   0.23281\n  0.46516   0.163517  0.306468  -0.0298581      0.342518   0.163517   0.23281","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"The constructor shares the same keyword arguments as the convert or copyto! functions. The type parameter, Float64 in this example, indicates the SnpLinAlg acts like a Float64 matrix. SnpLinAlg directly uses the SnpArray for computation and does not expand into full numeric array. ","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Base.summarysize(EUR), Base.summarysize(EURsla)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"(6876757, 8177245)","category":"page"},{"location":"#mul!","page":"SnpArrays.jl Tutorial","title":"mul!","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpLinAlg act similar to a regular matrix and responds to size, eltype, SnpLinAlg-vector multiplication, and SnpLinAlg-matrix multiplications. Other linear algebra operations (e.g. qr()) should work on a SnpLinAlg, but will be much slower. ","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@show size(EURsla)\n@show eltype(EURsla)\n@show typeof(EURsla) <: AbstractMatrix;","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"size(EURsla) = (379, 54051)\neltype(EURsla) = Float64\ntypeof(EURsla) <: AbstractMatrix = true","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Matrix-vector and matrix-matrix multiplications with SnpLinAlg are mathematically equivalent to the corresponding Float matrix contained from convert or copyto! a SnpArray.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"using LinearAlgebra\nv1 = randn(size(EUR, 1))\nv2 = randn(size(EUR, 2))\nA = convert(Matrix{Float64}, EUR, model=ADDITIVE_MODEL, center=true, scale=true);","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"norm(EURsla * v2 - A * v2)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"3.219256691519521e-11","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"norm(EURsla' * v1 - A' * v1)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"6.721174834452134e-12","category":"page"},{"location":"#Linear-Algebra-Performance","page":"SnpArrays.jl Tutorial","title":"Linear Algebra Performance","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"See Linear Algebra Benchmarks on the left for performance comparison among BLAS, SnpLinAlg, and CuSnpArray (for GPU). In general,","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpLinAlg-vector multiplications are at least 2x faster than the corresponding Matrix{Float64}-vector multiplication using BLAS\nCuSnpArray-vector multiplications on the GPU is 50x faster than BLAS, and\nSnpLinAlg-matrix multiplication is competitive with BLAS if the right hand matrix is \"tall and thin\".","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Note that SnpLinAlg does not allocate additional memory, and can impute missing values with column means. ","category":"page"},{"location":"#copyto!,-convert,-and-subarrays","page":"SnpArrays.jl Tutorial","title":"copyto!, convert, and subarrays","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"copyto! and convert are also supported on SnpLinAlgs, but without the impute, scale, center keyword arguments. The destination array will be scaled/centered if the SnpLinAlg was scaled/centered. ","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# convert work on SnpLinAlg (and subarrays of it)\nAtrue = convert(Matrix{Float64}, EUR, center=true, scale=true, impute=true)\nA = convert(Matrix{Float64}, EURsla)\nall(Atrue .≈ A)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"true","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# copyto on a subarray\nv = zeros(size(EUR, 1), 10)\ncopyto!(v, @view(EURsla[:, 1:2:20]))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"379×10 Matrix{Float64}:\n  0.46516  0.306468  -0.539104  -0.370294  …   0.238721   0.551318   0.301719\n  0.46516  0.306468   0.97438    1.09159       0.238721   0.551318   0.301719\n  0.46516  0.306468   0.97438    1.09159       0.238721   0.551318   0.301719\n  0.46516  0.306468   0.97438    1.09159       0.238721   0.551318   0.301719\n  0.46516  0.306468   0.97438    1.09159       0.238721   0.551318   0.301719\n -1.91722  0.306468   0.97438   -0.370294  …   0.238721   0.551318   0.301719\n -1.91722  0.306468  -0.539104  -1.83218      -4.06963    0.551318   0.301719\n -1.91722  0.306468  -0.539104  -0.370294      0.238721  -1.53818    0.301719\n  0.46516  0.306468  -0.539104  -0.370294     -4.06963    0.551318   0.301719\n -1.91722  0.306468   0.97438   -0.370294      0.238721   0.551318  -3.16348\n  0.46516  0.306468   0.97438    1.09159   …   0.238721  -1.53818    0.301719\n  0.46516  0.306468   0.97438    1.09159       0.238721   0.551318   0.301719\n  0.46516  0.306468  -0.539104   1.09159       0.238721   0.551318   0.301719\n  ⋮                                        ⋱                        \n  0.46516  0.306468  -0.539104  -0.370294      0.238721   0.551318   0.301719\n  0.46516  0.306468  -0.539104  -0.370294      0.238721   0.551318   0.301719\n  0.46516  0.306468  -0.539104  -0.370294     -4.06963    0.551318   0.301719\n -1.91722  0.306468   0.97438   -0.370294  …   0.238721   0.551318   0.301719\n  0.46516  0.306468  -2.05259   -0.370294      0.238721   0.551318   0.301719\n -1.91722  0.306468   0.97438   -0.370294      0.238721  -1.53818    0.301719\n  0.46516  0.306468   0.97438    1.09159       0.238721   0.551318   0.301719\n  0.46516  0.306468   0.97438    1.09159       0.238721   0.551318   0.301719\n -1.91722  0.306468   0.97438   -0.370294  …   0.238721   0.551318   0.301719\n  0.46516  0.306468   0.97438    1.09159       0.238721   0.551318   0.301719\n -1.91722  0.306468  -2.05259   -1.83218       0.238721   0.551318   0.301719\n  0.46516  0.306468  -0.539104  -0.370294      0.238721   0.551318   0.301719","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"all(v .≈ Atrue[:, 1:2:20])","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"true","category":"page"},{"location":"#GPU-support:-CuSnpArray","page":"SnpArrays.jl Tutorial","title":"GPU support: CuSnpArray","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"On machines with Nvidia GPU, matrix-vector multiplications can be performed on it via CuSnpArray. The input vectors should be CuVectors. ","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"ENV[\"JULIA_CUDA_USE_BINARYBUILDER\"] = \"false\" # will use local CUDA installation\nusing CUDA, Adapt\nout1 = randn(size(EUR, 1))\nout2 = randn(size(EUR, 2))\nv1 = randn(size(EUR, 1))\nv2 = randn(size(EUR, 2))\nv1_d = adapt(CuVector{Float64}, v1) # sends data to GPU\nv2_d = adapt(CuVector{Float64}, v2)\nout1_d = adapt(CuVector{Float64}, out1)\nout2_d = adapt(CuVector{Float64}, out2)\n\nconst EURcu = CuSnpArray{Float64}(EUR; model=ADDITIVE_MODEL, center=true, scale=true);","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@btime mul!($out1_d, $EURcu, $v2_d);","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  15.023 ms (98 allocations: 2.41 KiB)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@btime mul!($out2_d, transpose($EURcu), $v1_d);","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  488.026 μs (162 allocations: 5.28 KiB)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"The operations are parallelized along the output dimension, hence the GPU was not fully utilized in the first case. With 100-time larger data, 30 to 50-fold speedup were observed for both cases with Nvidia Titan V. See linear algebra page for more information.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Let's check correctness of the result.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"norm(collect(EURcu' * v1_d) -  EURbm' * v1)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"1.6074725741184302e-11","category":"page"},{"location":"#SnpData","page":"SnpArrays.jl Tutorial","title":"SnpData","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"We can create a SnpData, which has a SnpArray with information on SNP and subject appended.","category":"page"},{"location":"#Constructor-3","page":"SnpArrays.jl Tutorial","title":"Constructor","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"EUR_data = SnpData(SnpArrays.datadir(\"EUR_subset\"))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 379, snps: 54051,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: /home/huazhou/.julia/dev/SnpArrays.jl/src/../data/EUR_subset.bed\nsrcbim: /home/huazhou/.julia/dev/SnpArrays.jl/src/../data/EUR_subset.bim\nsrcfam: /home/huazhou/.julia/dev/SnpArrays.jl/src/../data/EUR_subset.fam\n)","category":"page"},{"location":"#Filter","page":"SnpArrays.jl Tutorial","title":"Filter","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"We can filter SnpData by functions f_person and f_snp. f_person applies to the field person_info and selects persons (rows) for which f_person is true.f_snp applies to the field snp_info and selects snps (columns) for which f_snp is true. The first argument can be either a SnpData or an AbstractString.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.filter(EUR_data; des=\"tmp.filter.chr.17\", f_snp = x -> x[:chromosome]==\"17\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 379, snps: 11041,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp.filter.chr.17.bed\nsrcbim: tmp.filter.chr.17.bim\nsrcfam: tmp.filter.chr.17.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.filter(SnpArrays.datadir(\"EUR_subset\"); des=\"tmp.filter.chr.17\", f_snp = x -> x[:chromosome]==\"17\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 379, snps: 11041,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp.filter.chr.17.bed\nsrcbim: tmp.filter.chr.17.bim\nsrcfam: tmp.filter.chr.17.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.filter(EUR_data; des=\"tmp.filter.sex.male\", f_person = x -> x[:sex] == \"1\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 178, snps: 54051,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 3   │ 7        │ HG00103  │ 0        │ 0        │ 1        │ 1         │\n│ 4   │ 10       │ HG00108  │ 0        │ 0        │ 1        │ 1         │\n│ 5   │ 11       │ HG00109  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 14       │ HG00112  │ 0        │ 0        │ 1        │ 1         │\n…,\nsrcbed: tmp.filter.sex.male.bed\nsrcbim: tmp.filter.sex.male.bim\nsrcfam: tmp.filter.sex.male.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Both f_person and f_snp can be used at the same time.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.filter(EUR_data; des=\"tmp.filter.chr.17.sex.male\", f_person = x -> x[:sex] == \"1\", f_snp = x -> x[:chromosome] == \"17\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 178, snps: 11041,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 3   │ 7        │ HG00103  │ 0        │ 0        │ 1        │ 1         │\n│ 4   │ 10       │ HG00108  │ 0        │ 0        │ 1        │ 1         │\n│ 5   │ 11       │ HG00109  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 14       │ HG00112  │ 0        │ 0        │ 1        │ 1         │\n…,\nsrcbed: tmp.filter.chr.17.sex.male.bed\nsrcbim: tmp.filter.chr.17.sex.male.bim\nsrcfam: tmp.filter.chr.17.sex.male.fam\n)","category":"page"},{"location":"#Split","page":"SnpArrays.jl Tutorial","title":"Split","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"We can split SnpData by SNP's choromosomes or each person's sex or phenotype using split_plink. Again, the first argument can be an SnpData or an AbstractString.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"splitted = SnpArrays.split_plink(SnpArrays.datadir(\"EUR_subset\"), :chromosome; prefix=\"tmp.split.chr.\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Dict{AbstractString,SnpData} with 6 entries:\n  \"21\" => SnpData(people: 379, snps: 5813,…\n  \"17\" => SnpData(people: 379, snps: 11041,…\n  \"19\" => SnpData(people: 379, snps: 9690,…\n  \"20\" => SnpData(people: 379, snps: 9327,…\n  \"22\" => SnpData(people: 379, snps: 5938,…\n  \"18\" => SnpData(people: 379, snps: 12242,…","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Let's take a SnpArray for chromosome 17.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"piece = splitted[\"17\"]","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 379, snps: 11041,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp.split.chr.17.bed\nsrcbim: tmp.split.chr.17.bim\nsrcfam: tmp.split.chr.17.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"@assert all(piece.snp_info[!, :chromosome].== \"17\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"splitted_sex = SnpArrays.split_plink(EUR_data, :sex; prefix=\"tmp.split.sex.\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Dict{AbstractString,SnpData} with 2 entries:\n  \"1\" => SnpData(people: 178, snps: 54051,…\n  \"2\" => SnpData(people: 201, snps: 54051,…","category":"page"},{"location":"#Concatenation","page":"SnpArrays.jl Tutorial","title":"Concatenation","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"hcat, vcat, and hvcat are also implemented for SnpData. All of .bed, .bim, .fam files are created. Simple concatenation expression can be used (with the side effect of creation of temporary plink files). One may also set the desitination using the keyword argument des. ","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"[piece piece]","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 379, snps: 22082,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp_hcat_1.bed\nsrcbim: tmp_hcat_1.bim\nsrcfam: tmp_hcat_1.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"[piece; piece]","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 758, snps: 11041,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp_vcat_1.bed\nsrcbim: tmp_vcat_1.bim\nsrcfam: tmp_vcat_1.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"[piece piece; piece piece]","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 758, snps: 22082,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp_hvcat1.bed\nsrcbim: tmp_hvcat1.bim\nsrcfam: tmp_hvcat1.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"hcat(piece, piece; des=\"tmp.hcat\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 379, snps: 22082,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp.hcat.bed\nsrcbim: tmp.hcat.bim\nsrcfam: tmp.hcat.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"vcat(piece, piece; des=\"tmp.vcat\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 758, snps: 11041,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp.vcat.bed\nsrcbim: tmp.vcat.bim\nsrcfam: tmp.vcat.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"hvcat((2,2), piece, piece, piece, piece; des=\"tmp.hvcat\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 758, snps: 22082,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp.hvcat.bed\nsrcbim: tmp.hvcat.bim\nsrcfam: tmp.hvcat.fam\n)","category":"page"},{"location":"#Merge","page":"SnpArrays.jl Tutorial","title":"Merge","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"We can merge the splitted dictionary back into one SnpData using merge_plink.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"merged = SnpArrays.merge_plink(\"tmp.merged\", splitted) # write_plink is included here","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  0.056015 seconds (98.16 k allocations: 7.223 MiB)\n  0.035861 seconds (122.92 k allocations: 11.498 MiB)\n  0.038899 seconds (130.58 k allocations: 8.695 MiB)\n\n\n\n\n\nSnpData(people: 379, snps: 54051,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp.merged.bim\nsrcbim: tmp.merged.bed\nsrcfam: tmp.merged.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"You can also merge the plink formatted files based on their common prefix.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"merged_from_splitted_files = merge_plink(\"tmp.split.chr\"; des = \"tmp.merged.2\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"  0.165377 seconds (562.86 k allocations: 30.022 MiB, 39.41% gc time)\n  0.001048 seconds (691 allocations: 2.101 MiB)\n  0.002526 seconds (12 allocations: 4.897 MiB)\n  0.000520 seconds (12 allocations: 1.650 MiB)\n\n\n\n\n\nSnpData(people: 379, snps: 54051,\nsnp_info: \n│ Row │ chromosome │ snpid       │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String      │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼─────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 17         │ rs34151105  │ 0.0              │ 1665     │ T       │ C       │\n│ 2   │ 17         │ rs143500173 │ 0.0              │ 2748     │ T       │ A       │\n│ 3   │ 17         │ rs113560219 │ 0.0              │ 4702     │ T       │ C       │\n│ 4   │ 17         │ rs1882989   │ 5.6e-5           │ 15222    │ G       │ A       │\n│ 5   │ 17         │ rs8069133   │ 0.000499         │ 32311    │ G       │ A       │\n│ 6   │ 17         │ rs112221137 │ 0.000605         │ 36405    │ G       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid      │ father   │ mother   │ sex      │ phenotype │\n│     │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstrac… │ Abstract… │\n├─────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┤\n│ 1   │ 1        │ HG00096  │ 0        │ 0        │ 1        │ 1         │\n│ 2   │ 2        │ HG00097  │ 0        │ 0        │ 2        │ 1         │\n│ 3   │ 3        │ HG00099  │ 0        │ 0        │ 2        │ 1         │\n│ 4   │ 4        │ HG00100  │ 0        │ 0        │ 2        │ 1         │\n│ 5   │ 5        │ HG00101  │ 0        │ 0        │ 1        │ 1         │\n│ 6   │ 6        │ HG00102  │ 0        │ 0        │ 2        │ 1         │\n…,\nsrcbed: tmp.merged.2.bim\nsrcbim: tmp.merged.2.bed\nsrcfam: tmp.merged.2.fam\n)","category":"page"},{"location":"#Reorder","page":"SnpArrays.jl Tutorial","title":"Reorder","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Order of subjects can be changed using the function reorder!.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"const mouse_prefix = SnpArrays.datadir(\"mouse\")\nrun(`cp $(mouse_prefix * \".bed\") mouse_reorder.bed`)\nrun(`cp $(mouse_prefix * \".bim\") mouse_reorder.bim`)\nrun(`cp $(mouse_prefix * \".fam\") mouse_reorder.fam`)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"Process(`\u001b[4mcp\u001b[24m \u001b[4m/home/huazhou/.julia/dev/SnpArrays.jl/src/../data/mouse.fam\u001b[24m \u001b[4mmouse_reorder.fam\u001b[24m`, ProcessExited(0))","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"mouse_data = SnpData(mouse_prefix)\nmouse_toreorder = SnpData(\"mouse_reorder\", \"r+\")\nm, n = size(mouse_toreorder.snparray)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"(1940, 10150)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"For example, the below randomly permutes subjects.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"using Random\nind = randperm(m)\nSnpArrays.reorder!(mouse_toreorder, ind)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"mouse_toreorder","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpData(people: 1940, snps: 10150,\nsnp_info: \n│ Row │ chromosome │ snpid      │ genetic_distance │ position │ allele1 │ allele2 │\n│     │ String     │ String     │ Float64          │ Int64    │ Cat…    │ Cat…    │\n├─────┼────────────┼────────────┼──────────────────┼──────────┼─────────┼─────────┤\n│ 1   │ 1          │ rs3683945  │ 0.0              │ 0        │ A       │ G       │\n│ 2   │ 1          │ rs3707673  │ 0.1              │ 1        │ G       │ A       │\n│ 3   │ 1          │ rs6269442  │ 0.11751          │ 2        │ A       │ G       │\n│ 4   │ 1          │ rs6336442  │ 0.135771         │ 3        │ A       │ G       │\n│ 5   │ 1          │ rs13475700 │ 0.24268          │ 5        │ A       │ C       │\n│ 6   │ 1          │ rs3658242  │ 0.251925         │ 6        │ A       │ T       │\n…,\nperson_info: \n│ Row │ fid      │ iid        │ father       │ mother       │ sex      │ phenotype │\n│     │ Abstrac… │ AbstractS… │ AbstractStr… │ AbstractStr… │ Abstrac… │ Abstract… │\n├─────┼──────────┼────────────┼──────────────┼──────────────┼──────────┼───────────┤\n│ 1   │ 1_1      │ A048097274 │ H4.2:C5.1(4) │ H4.2:G1.1(7) │ 1        │ -9        │\n│ 2   │ 1_3      │ A064095000 │ E5.4:H3.3(6) │ E5.4:D3.3(6) │ 2        │ -9        │\n│ 3   │ 1_48     │ A064048791 │ F2.5:A4.4(2) │ F2.5:E2.4(4) │ 1        │ -9        │\n│ 4   │ 1_58     │ A063516577 │ B1.5:E1.4(4) │ B1.5:A1.4(5) │ 1        │ -9        │\n│ 5   │ 1_1      │ A066891006 │ E4.3:H4.2(4) │ E4.3:D3.2(3) │ 2        │ -9        │\n│ 6   │ 1_49     │ A063812087 │ A2.5:D2.4(4) │ A2.5:H3.4(2) │ 1        │ -9        │\n…,\nsrcbed: mouse_reorder.bed\nsrcbim: mouse_reorder.bim\nsrcfam: mouse_reorder.fam\n)","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"This functionality mainly targets Cox regression, where sorting subjects in decreasing order of (censored) survival time results in more efficient implementation.","category":"page"},{"location":"#VCF-to-PLINK","page":"SnpArrays.jl Tutorial","title":"VCF to PLINK","text":"","category":"section"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"SnpArrays.jl includes a function to transform a (gzipped) VCF file to PLINK-formatted files. This function drops multi-allelic variants and variants with missing identifier.","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# Download an example VCF file\nisfile(\"test.08Jun17.d8b.vcf.gz\") || download(\"http://faculty.washington.edu/browning/beagle/test.08Jun17.d8b.vcf.gz\", \n    joinpath(pwd(), \"test.08Jun17.d8b.vcf.gz\"));","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"vcf2plink(\"test.08Jun17.d8b.vcf.gz\", \"test.08Jun17.d8b\")","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"191×1354 SnpArray:\n 0x00  0x00  0x00  0x00  0x02  0x00  …  0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x02  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x02  0x00  …  0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x02  0x02  0x00\n 0x00  0x00  0x00  0x00  0x02  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x02  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00  …  0x00  0x00  0x00  0x02  0x02  0x00\n 0x00  0x00  0x00  0x00  0x02  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x02  0x02  0x00\n    ⋮                             ⋮  ⋱                 ⋮              \n 0x00  0x00  0x00  0x00  0x02  0x00     0x00  0x00  0x00  0x02  0x02  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00  …  0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00  …  0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00     0x00  0x00  0x00  0x00  0x00  0x00\n 0x00  0x00  0x00  0x00  0x00  0x00  …  0x00  0x00  0x00  0x00  0x00  0x00","category":"page"},{"location":"","page":"SnpArrays.jl Tutorial","title":"SnpArrays.jl Tutorial","text":"# clean up\nfor ft in [\"bim\", \"fam\", \"bed\"]\n    rm(\"tmp.filter.chr.17.\" * ft, force=true)\n    rm(\"tmp.filter.sex.male.\" * ft, force=true)\n    rm(\"tmp.filter.chr.17.sex.male.\" * ft, force=true)\n    for k in keys(splitted)\n        rm(\"tmp.split.chr.$(k).\" * ft, force=true)\n    end\n    for k in keys(splitted_sex)\n        rm(\"tmp.split.sex.$(k).\" * ft, force=true)\n    end\n    rm(\"tmp.merged.\" * ft, force=true)\n    rm(\"tmp.merged.2.\" * ft, force=true)\n    \n    rm(\"tmp.hcat.\" * ft, force=true)\n    rm(\"tmp.vcat.\" * ft, force=true)\n    rm(\"tmp.hvcat.\" * ft, force=true)\n\n    tmplist = glob(\"tmp_*\" * ft)\n    for f in tmplist\n        rm(f, force=true)\n    end\nend\ntmplist = readdir(glob\"tmp_*.bed\", \".\")\nfor f in tmplist\n    rm(f, force=true)\nend\nrm(\"mouse_reorder.bim\", force=true)\nrm(\"mouse_reorder.bed\", force=true)\nrm(\"mouse_reorder.fam\", force=true)\nrm(\"mouse_reorder.reordered.fam\", force=true)\nrm(\"test.08Jun17.d8b.vcf.gz\", force=true)\nrm(\"test.08Jun17.d8b.bed\", force=true)\nrm(\"test.08Jun17.d8b.bim\", force=true)\nrm(\"test.08Jun17.d8b.fam\", force=true)","category":"page"}]
}
